[
  "error CalldataEmptyButInitNotZero()",
  "error FacetAddressIsNotZero()",
  "error FacetAddressIsZero()",
  "error FacetContainsNoCode()",
  "error FunctionAlreadyExists()",
  "error FunctionDoesNotExist()",
  "error FunctionIsImmutable()",
  "error IncorrectFacetCutAction()",
  "error InitReverted(bytes reason)",
  "error InitZeroButCalldataNotEmpty()",
  "error NoSelectorsInFace()",
  "error ZeroAddress()",
  "fallback() payable",
  "receive() payable",
  "error OnlyContractOwner()",
  "event DiamondCut((address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "function diamondCut((address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "error AlreadyInitialized()",
  "error CannotAuthorizeSelf()",
  "function initialize(address _protocolFeeVault, address _feeValidator, address _refundVault, address _permit2)",
  "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
  "function facetAddresses() view returns (address[] facetAddresses_)",
  "function facetFunctionSelectors(address _facet) view returns (bytes4[] facetFunctionSelectors_)",
  "function facets() view returns ((address facetAddress, bytes4[] functionSelectors)[] facets_)",
  "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "function owner() view returns (address owner_)",
  "function transferOwnership(address _newOwner)",
  "event ExecutionAllowed(address indexed account, bytes4 indexed method)",
  "event ExecutionDenied(address indexed account, bytes4 indexed method)",
  "function addressCanExecuteMethod(bytes4 _selector, address _executor) view returns (bool)",
  "function setBatchCanExecute(bytes4[] _selector, address[] _executor, bool[] _canExecute)",
  "function setCanExecute(bytes4 _selector, address _executor, bool _canExecute)",
  "error UnAuthorized()",
  "event ProtocolFeeVaultUpdated(address indexed protocolFeeVault)",
  "event RefundVaultUpdated(address indexed refundVault)",
  "function getProtocolFeeVault() view returns (address)",
  "function getRefundVault() view returns (address)",
  "function setProtocolFeeVault(address _protocolFeeVault)",
  "function setRefundVault(address _refundVault)",
  "event FeeValidatorUpdated(address indexed feeValidator)",
  "function getFeeValidator() view returns (address)",
  "function getNonce(address _user) view returns (uint256)",
  "function setFeeValidator(address _feeValidator)",
  "error AdapterNotWhitelisted(address adapter)",
  "error BridgeNotWhitelisted(address bridge)",
  "error DexNotWhitelised(address dex)",
  "error NotAContract()",
  "event AdapterAdded(address indexed adapter)",
  "event AdapterRemoved(address indexed adapter)",
  "event AdaptersAdded(address[] adapters)",
  "event AdaptersRemoved(address[] adapters)",
  "event BridgeAdded(address indexed bridge)",
  "event BridgeRemoved(address indexed bridge)",
  "event BridgesAdded(address[] bridges)",
  "event BridgesRemoved(address[] bridges)",
  "event DexAdded(address indexed dex)",
  "event DexRemoved(address indexed dex)",
  "event DexesAdded(address[] dexes)",
  "event DexesRemoved(address[] dexes)",
  "function addAdapter(address _adapter)",
  "function addAdapters(address[] _adapters)",
  "function addBridge(address _bridge)",
  "function addBridges(address[] _bridges)",
  "function addDex(address _dex)",
  "function addDexesAndBridges(address[] _dexs, address[] _bridges)",
  "function addDexs(address[] _dexs)",
  "function isAdapterWhitelisted(address _adapter) view returns (bool)",
  "function isBridgeWhitelisted(address _bridge) view returns (bool)",
  "function isDexWhitelisted(address _dex) view returns (bool)",
  "function removeAdapter(address _adapter)",
  "function removeAdapters(address[] _adapters)",
  "function removeBridge(address _bridge)",
  "function removeBridges(address[] _bridges)",
  "function removeDex(address _dex)",
  "function removeDexesAndBridges(address[] _dexs, address[] _bridges)",
  "function removeDexs(address[] _dexs)",
  "error InsufficientBalance(uint256 amount, uint256 contractBalance)",
  "error NativeTransferFailed()",
  "error NoTransferToNullAddress()",
  "error ReentrancyError()",
  "error WithdrawFailed()",
  "event LogWithdraw(address indexed tokenAddress, address to, uint256 amount)",
  "function executeCallAndWithdraw(address _callTo, bytes _callData, address _token, address _to, uint256 _amount)",
  "function withdraw(address _token, address _to, uint256 _amount)",
  "error InvalidPermit(string)",
  "error InvalidPermitType()",
  "error NoSwapFromZeroAmount()",
  "error NullAddrIsNotAValidRecipient()",
  "error NullAddrIsNotAValidSpender()",
  "error SlippageTooHigh(uint256 minAmount, uint256 returnAmount)",
  "error SwapCallFailed(address target, bytes4 funSig, bytes reason)",
  "event DZapBatchTokenSwapped(bytes indexed transactionId, address indexed sender, (string dex, address callTo, address recipient, address fromToken, address toToken, uint256 fromAmount, uint256 returnToAmount)[] swapInfo)",
  "event DZapTokenSwapped(bytes indexed transactionId, address indexed sender, (string dex, address callTo, address recipient, address fromToken, address toToken, uint256 fromAmount, uint256 returnToAmount) swapInfo)",
  "function swap(bytes _transactionId, bytes _batchDepositSignature, ((address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) _tokenDepositDetails, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount)[] _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer)[] _swapExecutionData, bool withoutRevert) payable",
  "function swap(bytes _transactionId, (address token, uint256 amount, bytes permit)[] _inputTokens, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount)[] _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer)[] _swapExecutionData, bool withoutRevert) payable",
  "function swap(bytes _transactionId, bytes _tokenApprovalData, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount) _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer) _swapExecutionData) payable",
  "error AdapterCallFailed(address adapter, bytes res)",
  "error SigDeadlineExpired()",
  "error UnauthorizedSigner()",
  "event BridgeStarted(bytes indexed transactionId, address indexed user, bytes receiver, string bridge, address bridgeAddress, address from, bytes to, uint256 amount, uint256 destinationChainId, bool hasDestinationCall)",
  "event DZapBridgeStarted(bytes indexed transactionId, address indexed user, address indexed integrator)",
  "function bridge(bytes _transactionId, bytes _feeData, bytes _feeVerificationSignature, uint256 _deadline, (address token, uint256 amount, bytes permit)[] _erc20Token, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount, bool updateBridgeInAmount)[] _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer)[] _swapExecutionData, (address adapter, bytes adapterData)[] _adapterInfo) payable",
  "function bridge(bytes _transactionId, bytes _feeData, bytes _feeVerificationSignature, bytes _batchDepositSignature, uint256 _deadline, ((address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) _tokenDepositDetails, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount, bool updateBridgeInAmount)[] _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer)[] _swapExecutionData, (address adapter, bytes adapterData)[] _adapterInfo) payable",
  "function bridge(bytes _transactionId, bytes _feeData, bytes _feeVerificationSignature, uint256 _deadline, (address token, uint256 amount, bytes permit) _intputTokens, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount, bool updateBridgeInAmount) _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer) _swapExecutionData, (address adapter, bytes adapterData) _adapterInfo) payable",
  "function bridge(bytes _transactionId, bytes _feeData, bytes _feeVerificationSignature, uint256 _deadline, (address token, uint256 amount, bytes permit) _intputTokens, (address adapter, bytes adapterData) _adapterInfo) payable",
  "event DZapGasLessStarted(bytes indexed _transactionId, address indexed executor, address indexed _user)",
  "function executeBridge(bytes _transactionId, bytes _bridgeFeeData, bytes _userIntentSignature, bytes _feeVerificationSignature, uint256 _userIntentDeadline, uint256 _bridgeFeeDeadline, address _user, (address token, uint256 amount, bytes permit) _inputToken, (address token, uint256 amount) _executorFeeInfo, (address adapter, bytes adapterData) _adapterInfo) payable",
  "function executeMultiBridge(bytes _transactionId, bytes _bridgeFeeData, bytes _userIntentSignature, bytes _feeVerificationSignature, uint256 _userIntentDeadline, uint256 _bridgeFeeDeadline, address _user, (address token, uint256 amount, bytes permit)[] _inputTokens, (address token, uint256 amount)[] _executorFeeInfo, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount, bool updateBridgeInAmount)[] _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer)[] _swapExecutionData, (address adapter, bytes adapterData)[] _adapterInfo) payable",
  "function executeMultiBridgeBatchWithPermit2Witness(bytes _transactionId, bytes _bridgeFeeData, bytes _userIntentSignature, bytes _feeVerificationSignature, uint256 _bridgeFeeDeadline, address _user, ((address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) _tokenDepositDetails, (address token, uint256 amount)[] _executorFeeInfo, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount, bool updateBridgeInAmount)[] _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer)[] _swapExecutionData, (address adapter, bytes adapterData)[] _adapterInfo) payable",
  "function executeMultiSwap(bytes _transactionId, bytes _userIntentSignature, uint256 _userIntentDeadline, address _user, (address token, uint256 amount, bytes permit)[] _inputTokens, (address token, uint256 amount)[] _executorFeeInfo, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount)[] _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer)[] _swapExecutionData)",
  "function executeMultiSwapWithPermit2Witness(bytes _transactionId, bytes _userIntentSignature, address _user, ((address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) _tokenDepositDetails, (address token, uint256 amount)[] _executorFeeInfo, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount)[] _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer)[] _swapExecutionData)",
  "function executeSwap(bytes _transactionId, bytes _userIntentSignature, bytes _tokenApprovalData, uint256 _userIntentDeadline, address _user, (address token, uint256 amount) _executorFeeInfo, (address recipient, address from, address to, uint256 fromAmount, uint256 minToAmount) _swapData, (string dex, address callTo, address approveTo, bytes swapCallData, bool isDirectTransfer) _swapExecutionData)"
]