/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type BridgeDataStruct = {
  bridge: PromiseOrValue<string>;
  from: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  receiver: PromiseOrValue<string>;
  minAmount: PromiseOrValue<BigNumberish>;
  destinationChainId: PromiseOrValue<BigNumberish>;
  hasSourceSwaps: PromiseOrValue<boolean>;
  hasDestinationCall: PromiseOrValue<boolean>;
};

export type BridgeDataStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  boolean,
  boolean
] & {
  bridge: string;
  from: string;
  to: string;
  receiver: string;
  minAmount: BigNumber;
  destinationChainId: BigNumber;
  hasSourceSwaps: boolean;
  hasDestinationCall: boolean;
};

export type CallToFunctionInfoStruct = {
  isAvailable: PromiseOrValue<boolean>;
  offset: PromiseOrValue<BigNumberish>;
};

export type CallToFunctionInfoStructOutput = [boolean, BigNumber] & {
  isAvailable: boolean;
  offset: BigNumber;
};

export type SwapInfoStruct = {
  dex: PromiseOrValue<string>;
  fromToken: PromiseOrValue<string>;
  toToken: PromiseOrValue<string>;
  fromAmount: PromiseOrValue<BigNumberish>;
  leftOverFromAmount: PromiseOrValue<BigNumberish>;
  returnToAmount: PromiseOrValue<BigNumberish>;
};

export type SwapInfoStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  dex: string;
  fromToken: string;
  toToken: string;
  fromAmount: BigNumber;
  leftOverFromAmount: BigNumber;
  returnToAmount: BigNumber;
};

export type CrossChainDataStruct = {
  callTo: PromiseOrValue<string>;
  approveTo: PromiseOrValue<string>;
  extraNative: PromiseOrValue<BigNumberish>;
  permit: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
};

export type CrossChainDataStructOutput = [
  string,
  string,
  BigNumber,
  string,
  string
] & {
  callTo: string;
  approveTo: string;
  extraNative: BigNumber;
  permit: string;
  callData: string;
};

export type SwapDataStruct = {
  callTo: PromiseOrValue<string>;
  approveTo: PromiseOrValue<string>;
  from: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  fromAmount: PromiseOrValue<BigNumberish>;
  minToAmount: PromiseOrValue<BigNumberish>;
  swapCallData: PromiseOrValue<BytesLike>;
  permit: PromiseOrValue<BytesLike>;
};

export type SwapDataStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  callTo: string;
  approveTo: string;
  from: string;
  to: string;
  fromAmount: BigNumber;
  minToAmount: BigNumber;
  swapCallData: string;
  permit: string;
};

export interface ICrossChainFacetInterface extends utils.Interface {
  functions: {
    "bridge(bytes32,address,address,(string,address,address,address,uint256,uint256,bool,bool),(address,address,uint256,bytes,bytes))": FunctionFragment;
    "bridgeMultipleTokens(bytes32,address,address,(string,address,address,address,uint256,uint256,bool,bool)[],(address,address,uint256,bytes,bytes)[])": FunctionFragment;
    "getSelectorInfo(address,bytes4)": FunctionFragment;
    "swapAndBridge(bytes32,address,address,(string,address,address,address,uint256,uint256,bool,bool)[],(address,address,address,address,uint256,uint256,bytes,bytes)[],(address,address,uint256,bytes,bytes)[])": FunctionFragment;
    "updateSelectorInfo(address[],bytes4[],(bool,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridge"
      | "bridgeMultipleTokens"
      | "getSelectorInfo"
      | "swapAndBridge"
      | "updateSelectorInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridge",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      BridgeDataStruct,
      CrossChainDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMultipleTokens",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      BridgeDataStruct[],
      CrossChainDataStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSelectorInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridge",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      BridgeDataStruct[],
      SwapDataStruct[],
      CrossChainDataStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSelectorInfo",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      CallToFunctionInfoStruct[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeMultipleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelectorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSelectorInfo",
    data: BytesLike
  ): Result;

  events: {
    "BridgeTransferStarted(bytes32,address,address,address,tuple)": EventFragment;
    "MultiTokenBridgeTransferStarted(bytes32,address,address,address,tuple[])": EventFragment;
    "SelectorToInfoUpdated(address[],bytes4[],tuple[])": EventFragment;
    "SwapBridgeTransferStarted(bytes32,address,address,address,tuple[],tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeTransferStarted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MultiTokenBridgeTransferStarted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectorToInfoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapBridgeTransferStarted"): EventFragment;
}

export interface BridgeTransferStartedEventObject {
  transactionId: string;
  integrator: string;
  sender: string;
  refundee: string;
  bridgeData: BridgeDataStructOutput;
}
export type BridgeTransferStartedEvent = TypedEvent<
  [string, string, string, string, BridgeDataStructOutput],
  BridgeTransferStartedEventObject
>;

export type BridgeTransferStartedEventFilter =
  TypedEventFilter<BridgeTransferStartedEvent>;

export interface MultiTokenBridgeTransferStartedEventObject {
  transactionId: string;
  integrator: string;
  sender: string;
  refundee: string;
  bridgeData: BridgeDataStructOutput[];
}
export type MultiTokenBridgeTransferStartedEvent = TypedEvent<
  [string, string, string, string, BridgeDataStructOutput[]],
  MultiTokenBridgeTransferStartedEventObject
>;

export type MultiTokenBridgeTransferStartedEventFilter =
  TypedEventFilter<MultiTokenBridgeTransferStartedEvent>;

export interface SelectorToInfoUpdatedEventObject {
  routers: string[];
  selectors: string[];
  info: CallToFunctionInfoStructOutput[];
}
export type SelectorToInfoUpdatedEvent = TypedEvent<
  [string[], string[], CallToFunctionInfoStructOutput[]],
  SelectorToInfoUpdatedEventObject
>;

export type SelectorToInfoUpdatedEventFilter =
  TypedEventFilter<SelectorToInfoUpdatedEvent>;

export interface SwapBridgeTransferStartedEventObject {
  transactionId: string;
  integrator: string;
  sender: string;
  refundee: string;
  bridgeData: BridgeDataStructOutput[];
  swapInfo: SwapInfoStructOutput[];
}
export type SwapBridgeTransferStartedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BridgeDataStructOutput[],
    SwapInfoStructOutput[]
  ],
  SwapBridgeTransferStartedEventObject
>;

export type SwapBridgeTransferStartedEventFilter =
  TypedEventFilter<SwapBridgeTransferStartedEvent>;

export interface ICrossChainFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICrossChainFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridge(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct,
      _genericData: CrossChainDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeMultipleTokens(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct[],
      _genericData: CrossChainDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSelectorInfo(
      _router: PromiseOrValue<string>,
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[CallToFunctionInfoStructOutput]>;

    swapAndBridge(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct[],
      _swapData: SwapDataStruct[],
      _genericData: CrossChainDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSelectorInfo(
      _routers: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _infos: CallToFunctionInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bridge(
    _transactionId: PromiseOrValue<BytesLike>,
    _integrator: PromiseOrValue<string>,
    _refundee: PromiseOrValue<string>,
    _bridgeData: BridgeDataStruct,
    _genericData: CrossChainDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeMultipleTokens(
    _transactionId: PromiseOrValue<BytesLike>,
    _integrator: PromiseOrValue<string>,
    _refundee: PromiseOrValue<string>,
    _bridgeData: BridgeDataStruct[],
    _genericData: CrossChainDataStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSelectorInfo(
    _router: PromiseOrValue<string>,
    _selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CallToFunctionInfoStructOutput>;

  swapAndBridge(
    _transactionId: PromiseOrValue<BytesLike>,
    _integrator: PromiseOrValue<string>,
    _refundee: PromiseOrValue<string>,
    _bridgeData: BridgeDataStruct[],
    _swapData: SwapDataStruct[],
    _genericData: CrossChainDataStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSelectorInfo(
    _routers: PromiseOrValue<string>[],
    _selectors: PromiseOrValue<BytesLike>[],
    _infos: CallToFunctionInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridge(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct,
      _genericData: CrossChainDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeMultipleTokens(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct[],
      _genericData: CrossChainDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getSelectorInfo(
      _router: PromiseOrValue<string>,
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CallToFunctionInfoStructOutput>;

    swapAndBridge(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct[],
      _swapData: SwapDataStruct[],
      _genericData: CrossChainDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSelectorInfo(
      _routers: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _infos: CallToFunctionInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BridgeTransferStarted(bytes32,address,address,address,tuple)"(
      transactionId?: null,
      integrator?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      refundee?: null,
      bridgeData?: null
    ): BridgeTransferStartedEventFilter;
    BridgeTransferStarted(
      transactionId?: null,
      integrator?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      refundee?: null,
      bridgeData?: null
    ): BridgeTransferStartedEventFilter;

    "MultiTokenBridgeTransferStarted(bytes32,address,address,address,tuple[])"(
      transactionId?: null,
      integrator?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      refundee?: null,
      bridgeData?: null
    ): MultiTokenBridgeTransferStartedEventFilter;
    MultiTokenBridgeTransferStarted(
      transactionId?: null,
      integrator?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      refundee?: null,
      bridgeData?: null
    ): MultiTokenBridgeTransferStartedEventFilter;

    "SelectorToInfoUpdated(address[],bytes4[],tuple[])"(
      routers?: null,
      selectors?: null,
      info?: null
    ): SelectorToInfoUpdatedEventFilter;
    SelectorToInfoUpdated(
      routers?: null,
      selectors?: null,
      info?: null
    ): SelectorToInfoUpdatedEventFilter;

    "SwapBridgeTransferStarted(bytes32,address,address,address,tuple[],tuple[])"(
      transactionId?: null,
      integrator?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      refundee?: null,
      bridgeData?: null,
      swapInfo?: null
    ): SwapBridgeTransferStartedEventFilter;
    SwapBridgeTransferStarted(
      transactionId?: null,
      integrator?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      refundee?: null,
      bridgeData?: null,
      swapInfo?: null
    ): SwapBridgeTransferStartedEventFilter;
  };

  estimateGas: {
    bridge(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct,
      _genericData: CrossChainDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeMultipleTokens(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct[],
      _genericData: CrossChainDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSelectorInfo(
      _router: PromiseOrValue<string>,
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapAndBridge(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct[],
      _swapData: SwapDataStruct[],
      _genericData: CrossChainDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSelectorInfo(
      _routers: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _infos: CallToFunctionInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridge(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct,
      _genericData: CrossChainDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeMultipleTokens(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct[],
      _genericData: CrossChainDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSelectorInfo(
      _router: PromiseOrValue<string>,
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapAndBridge(
      _transactionId: PromiseOrValue<BytesLike>,
      _integrator: PromiseOrValue<string>,
      _refundee: PromiseOrValue<string>,
      _bridgeData: BridgeDataStruct[],
      _swapData: SwapDataStruct[],
      _genericData: CrossChainDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSelectorInfo(
      _routers: PromiseOrValue<string>[],
      _selectors: PromiseOrValue<BytesLike>[],
      _infos: CallToFunctionInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
