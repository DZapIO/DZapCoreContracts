/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type FeeInfoStruct = {
  tokenFee: PromiseOrValue<BigNumberish>;
  fixedNativeFeeAmount: PromiseOrValue<BigNumberish>;
  dzapTokenShare: PromiseOrValue<BigNumberish>;
  dzapFixedNativeShare: PromiseOrValue<BigNumberish>;
};

export type FeeInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  tokenFee: BigNumber;
  fixedNativeFeeAmount: BigNumber;
  dzapTokenShare: BigNumber;
  dzapFixedNativeShare: BigNumber;
};

export interface IFeesFacetInterface extends utils.Interface {
  functions: {
    "calcFixedNativeFees(address,uint8)": FunctionFragment;
    "calcTokenFees(address,uint8,uint256)": FunctionFragment;
    "integratorFeeInfo(address,uint8)": FunctionFragment;
    "isIntegratorAllowed(address)": FunctionFragment;
    "maxFixedNativeFeeAmount()": FunctionFragment;
    "maxTokenFee()": FunctionFragment;
    "protocolFeeVault()": FunctionFragment;
    "removeIntegrator(address)": FunctionFragment;
    "setIntegratorInfo(address,uint8[],(uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "setProtocolFeeVault(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calcFixedNativeFees"
      | "calcTokenFees"
      | "integratorFeeInfo"
      | "isIntegratorAllowed"
      | "maxFixedNativeFeeAmount"
      | "maxTokenFee"
      | "protocolFeeVault"
      | "removeIntegrator"
      | "setIntegratorInfo"
      | "setProtocolFeeVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcFixedNativeFees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "integratorFeeInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isIntegratorAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFixedNativeFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokenFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeIntegrator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntegratorInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      FeeInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeVault",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcFixedNativeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integratorFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIntegratorAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFixedNativeFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeIntegrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntegratorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeVault",
    data: BytesLike
  ): Result;

  events: {
    "SetDzapFixedNativeFeeAmount(uint256)": EventFragment;
    "SetDzapTokenFee(uint256)": EventFragment;
    "SetFixedNativeFee(uint256)": EventFragment;
    "SetIntegrator(address,uint8[],tuple[])": EventFragment;
    "SetMaxPlatformFee(uint256)": EventFragment;
    "SetPlatformFee(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "SetDzapFixedNativeFeeAmount"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDzapTokenFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFixedNativeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIntegrator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxPlatformFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPlatformFee"): EventFragment;
}

export interface SetDzapFixedNativeFeeAmountEventObject {
  fee: BigNumber;
}
export type SetDzapFixedNativeFeeAmountEvent = TypedEvent<
  [BigNumber],
  SetDzapFixedNativeFeeAmountEventObject
>;

export type SetDzapFixedNativeFeeAmountEventFilter =
  TypedEventFilter<SetDzapFixedNativeFeeAmountEvent>;

export interface SetDzapTokenFeeEventObject {
  fee: BigNumber;
}
export type SetDzapTokenFeeEvent = TypedEvent<
  [BigNumber],
  SetDzapTokenFeeEventObject
>;

export type SetDzapTokenFeeEventFilter = TypedEventFilter<SetDzapTokenFeeEvent>;

export interface SetFixedNativeFeeEventObject {
  fee: BigNumber;
}
export type SetFixedNativeFeeEvent = TypedEvent<
  [BigNumber],
  SetFixedNativeFeeEventObject
>;

export type SetFixedNativeFeeEventFilter =
  TypedEventFilter<SetFixedNativeFeeEvent>;

export interface SetIntegratorEventObject {
  integrator: string;
  feeType: number[];
  info: FeeInfoStructOutput[];
}
export type SetIntegratorEvent = TypedEvent<
  [string, number[], FeeInfoStructOutput[]],
  SetIntegratorEventObject
>;

export type SetIntegratorEventFilter = TypedEventFilter<SetIntegratorEvent>;

export interface SetMaxPlatformFeeEventObject {
  fee: BigNumber;
}
export type SetMaxPlatformFeeEvent = TypedEvent<
  [BigNumber],
  SetMaxPlatformFeeEventObject
>;

export type SetMaxPlatformFeeEventFilter =
  TypedEventFilter<SetMaxPlatformFeeEvent>;

export interface SetPlatformFeeEventObject {
  fee: BigNumber;
}
export type SetPlatformFeeEvent = TypedEvent<
  [BigNumber],
  SetPlatformFeeEventObject
>;

export type SetPlatformFeeEventFilter = TypedEventFilter<SetPlatformFeeEvent>;

export interface IFeesFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeesFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcFixedNativeFees(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fixedNativeFeeAmount: BigNumber;
        dzapShare: BigNumber;
      }
    >;

    calcTokenFees(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { totalFee: BigNumber; dzapShare: BigNumber }
    >;

    integratorFeeInfo(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[FeeInfoStructOutput]>;

    isIntegratorAllowed(
      _integrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxFixedNativeFeeAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maxFixedNativeFee: BigNumber }>;

    maxTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeVault(overrides?: CallOverrides): Promise<[string]>;

    removeIntegrator(
      _integrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIntegratorInfo(
      _integrator: PromiseOrValue<string>,
      _feeTypes: PromiseOrValue<BigNumberish>[],
      _feeInfo: FeeInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeVault(
      _protocolFeeVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calcFixedNativeFees(
    _integrator: PromiseOrValue<string>,
    _feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      fixedNativeFeeAmount: BigNumber;
      dzapShare: BigNumber;
    }
  >;

  calcTokenFees(
    _integrator: PromiseOrValue<string>,
    _feeType: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { totalFee: BigNumber; dzapShare: BigNumber }
  >;

  integratorFeeInfo(
    _integrator: PromiseOrValue<string>,
    _feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FeeInfoStructOutput>;

  isIntegratorAllowed(
    _integrator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxFixedNativeFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeVault(overrides?: CallOverrides): Promise<string>;

  removeIntegrator(
    _integrator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIntegratorInfo(
    _integrator: PromiseOrValue<string>,
    _feeTypes: PromiseOrValue<BigNumberish>[],
    _feeInfo: FeeInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeVault(
    _protocolFeeVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calcFixedNativeFees(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fixedNativeFeeAmount: BigNumber;
        dzapShare: BigNumber;
      }
    >;

    calcTokenFees(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { totalFee: BigNumber; dzapShare: BigNumber }
    >;

    integratorFeeInfo(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FeeInfoStructOutput>;

    isIntegratorAllowed(
      _integrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxFixedNativeFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeVault(overrides?: CallOverrides): Promise<string>;

    removeIntegrator(
      _integrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIntegratorInfo(
      _integrator: PromiseOrValue<string>,
      _feeTypes: PromiseOrValue<BigNumberish>[],
      _feeInfo: FeeInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeVault(
      _protocolFeeVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetDzapFixedNativeFeeAmount(uint256)"(
      fee?: null
    ): SetDzapFixedNativeFeeAmountEventFilter;
    SetDzapFixedNativeFeeAmount(
      fee?: null
    ): SetDzapFixedNativeFeeAmountEventFilter;

    "SetDzapTokenFee(uint256)"(fee?: null): SetDzapTokenFeeEventFilter;
    SetDzapTokenFee(fee?: null): SetDzapTokenFeeEventFilter;

    "SetFixedNativeFee(uint256)"(fee?: null): SetFixedNativeFeeEventFilter;
    SetFixedNativeFee(fee?: null): SetFixedNativeFeeEventFilter;

    "SetIntegrator(address,uint8[],tuple[])"(
      integrator?: null,
      feeType?: null,
      info?: null
    ): SetIntegratorEventFilter;
    SetIntegrator(
      integrator?: null,
      feeType?: null,
      info?: null
    ): SetIntegratorEventFilter;

    "SetMaxPlatformFee(uint256)"(fee?: null): SetMaxPlatformFeeEventFilter;
    SetMaxPlatformFee(fee?: null): SetMaxPlatformFeeEventFilter;

    "SetPlatformFee(uint256)"(fee?: null): SetPlatformFeeEventFilter;
    SetPlatformFee(fee?: null): SetPlatformFeeEventFilter;
  };

  estimateGas: {
    calcFixedNativeFees(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenFees(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integratorFeeInfo(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIntegratorAllowed(
      _integrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFixedNativeFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeVault(overrides?: CallOverrides): Promise<BigNumber>;

    removeIntegrator(
      _integrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIntegratorInfo(
      _integrator: PromiseOrValue<string>,
      _feeTypes: PromiseOrValue<BigNumberish>[],
      _feeInfo: FeeInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeVault(
      _protocolFeeVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcFixedNativeFees(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokenFees(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integratorFeeInfo(
      _integrator: PromiseOrValue<string>,
      _feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIntegratorAllowed(
      _integrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFixedNativeFeeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeIntegrator(
      _integrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIntegratorInfo(
      _integrator: PromiseOrValue<string>,
      _feeTypes: PromiseOrValue<BigNumberish>[],
      _feeInfo: FeeInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeVault(
      _protocolFeeVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
