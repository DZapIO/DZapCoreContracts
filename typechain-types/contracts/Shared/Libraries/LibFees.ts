/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface LibFeesInterface extends utils.Interface {
  functions: {};

  events: {
    "FixedNativeFee(bytes32,address,uint8,uint256,uint256)": EventFragment;
    "TokenFee(bytes32,address,uint8,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FixedNativeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenFee"): EventFragment;
}

export interface FixedNativeFeeEventObject {
  transactionId: string;
  integrator: string;
  feeType: number;
  dzapFee: BigNumber;
  integratorFee: BigNumber;
}
export type FixedNativeFeeEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber],
  FixedNativeFeeEventObject
>;

export type FixedNativeFeeEventFilter = TypedEventFilter<FixedNativeFeeEvent>;

export interface TokenFeeEventObject {
  transactionId: string;
  integrator: string;
  feeType: number;
  token: string;
  dzapFee: BigNumber;
  integratorFee: BigNumber;
}
export type TokenFeeEvent = TypedEvent<
  [string, string, number, string, BigNumber, BigNumber],
  TokenFeeEventObject
>;

export type TokenFeeEventFilter = TypedEventFilter<TokenFeeEvent>;

export interface LibFees extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibFeesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "FixedNativeFee(bytes32,address,uint8,uint256,uint256)"(
      transactionId?: PromiseOrValue<BytesLike> | null,
      integrator?: PromiseOrValue<string> | null,
      feeType?: null,
      dzapFee?: null,
      integratorFee?: null
    ): FixedNativeFeeEventFilter;
    FixedNativeFee(
      transactionId?: PromiseOrValue<BytesLike> | null,
      integrator?: PromiseOrValue<string> | null,
      feeType?: null,
      dzapFee?: null,
      integratorFee?: null
    ): FixedNativeFeeEventFilter;

    "TokenFee(bytes32,address,uint8,address,uint256,uint256)"(
      transactionId?: PromiseOrValue<BytesLike> | null,
      integrator?: PromiseOrValue<string> | null,
      feeType?: null,
      token?: null,
      dzapFee?: null,
      integratorFee?: null
    ): TokenFeeEventFilter;
    TokenFee(
      transactionId?: PromiseOrValue<BytesLike> | null,
      integrator?: PromiseOrValue<string> | null,
      feeType?: null,
      token?: null,
      dzapFee?: null,
      integratorFee?: null
    ): TokenFeeEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
