/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BridgeMockInterface extends utils.Interface {
  functions: {
    "BPS_DENOMINATOR()": FunctionFragment;
    "BPS_MULTIPLIER()": FunctionFragment;
    "bridge(address,address,uint256,bool)": FunctionFragment;
    "bridgeAndSwap(address,address,uint256,bytes,bool)": FunctionFragment;
    "nativeFeeAmount()": FunctionFragment;
    "sendCallToReceiver(address,address,uint256,bytes,bool)": FunctionFragment;
    "tokenFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BPS_DENOMINATOR"
      | "BPS_MULTIPLIER"
      | "bridge"
      | "bridgeAndSwap"
      | "nativeFeeAmount"
      | "sendCallToReceiver"
      | "tokenFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BPS_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridge",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAndSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendCallToReceiver",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "tokenFee", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BPS_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCallToReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenFee", data: BytesLike): Result;

  events: {};
}

export interface BridgeMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    BPS_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridge(
      recipient_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeAndSwap(
      callTo_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      callData_: PromiseOrValue<BytesLike>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nativeFeeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendCallToReceiver(
      callTo_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      callData_: PromiseOrValue<BytesLike>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  BPS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  bridge(
    recipient_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    testRevert_: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeAndSwap(
    callTo_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    callData_: PromiseOrValue<BytesLike>,
    testRevert_: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nativeFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  sendCallToReceiver(
    callTo_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    callData_: PromiseOrValue<BytesLike>,
    testRevert_: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    BPS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(
      recipient_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeAndSwap(
      callTo_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      callData_: PromiseOrValue<BytesLike>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    nativeFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sendCallToReceiver(
      callTo_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      callData_: PromiseOrValue<BytesLike>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    BPS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(
      recipient_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeAndSwap(
      callTo_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      callData_: PromiseOrValue<BytesLike>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nativeFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sendCallToReceiver(
      callTo_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      callData_: PromiseOrValue<BytesLike>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BPS_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridge(
      recipient_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeAndSwap(
      callTo_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      callData_: PromiseOrValue<BytesLike>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nativeFeeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendCallToReceiver(
      callTo_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      callData_: PromiseOrValue<BytesLike>,
      testRevert_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
