/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Receiver,
  ReceiverInterface,
} from "../../../contracts/Periphery/Receiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_executor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoTransferToNullAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NullAddrIsNotAnERC20Token",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyError",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receivingAssetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "DZapTransferRecovered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
    ],
    name: "ExecutorSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "recoverGas",
        type: "uint256",
      },
    ],
    name: "RecoverGasSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensRecovered",
    type: "event",
  },
  {
    inputs: [],
    name: "executor",
    outputs: [
      {
        internalType: "contract IExecutor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "recoverToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_executor",
        type: "address",
      },
    ],
    name: "setExecutor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_transactionId",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_receiver",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minToAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapCallData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
        ],
        internalType: "struct SwapData",
        name: "_swapData",
        type: "tuple",
      },
    ],
    name: "swapAndCompleteBridgeTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080346100cb57601f610d6638819003918201601f19168301916001600160401b038311848410176100d05780849260409485528339810103126100cb57610052602061004b836100e6565b92016100e6565b6001600160a01b039182169182156100b957600080546001600160a01b031990811685178255604051949093917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a316906001541617600155610c6b90816100fb8239f35b60405163d92e233d60e01b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100cb5756fe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c9081631c3c0ea8146104c9575080638da5cb5b146104a35780639e11bb9f14610205578063a7229fd914610135578063c34c08e5146101095763f2fde38b03610011573461010557602036600319011261010557610085610548565b8354916001600160a01b03808416923384036100f557169384156100e857505082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a373ffffffffffffffffffffffffffffffffffffffff191617815580f35b5163d92e233d60e01b8152fd5b8551635c427cd960e01b81528390fd5b8280fd5b5050346101315781600319360112610131576020906001600160a01b03600154169051908152f35b5080fd5b50346101055760603660031901126101055761014f610548565b6001600160a01b03602435818116949185820361020157604435948188541633036101f357509186856101de9386957f401f439d865a766757ec78675925bd67198d5e78805aa41691b34b5d6a6cbbe698971680156000146101e4575082809281925af1506101bc6105c3565b505b5192839283602090939291936001600160a01b0360408201951681520152565b0390a280f35b6101ee9350610603565b6101be565b8351635c427cd960e01b8152fd5b8680fd5b50829060031990606036830112610105578035916024918235926001600160a01b039687851685036102015767ffffffffffffffff916044358381116103df576101008186019682360301126103df57604401928961026385610826565b1661027d57505050505061027a9394503492610951565b80f35b898498959a61028f6102c39596610826565b8651636eb1769f60e11b815233818f0190815230602082810191909152919c9197919388938e939116918391829160400190565b03915afa998a15610499578b9a610464575b506102df90610826565b1680156104545730156104445784516370a0823160e01b808252308d830152909285848681865afa93841561043a578c94610407575b5086516323b872dd60e01b87820152338682015230604482015260648082018d905281529060a08201908111828210176103f457869261035a8f9388938b5286610646565b88519485938492835230908301525afa9384156103ea578a946103b6575b505082039182116103a557508503610396575061027a949550610951565b5163162908e360e11b81528690fd5b634e487b7160e01b88526011895287fd5b9080929450813d83116103e3575b6103ce81836105a1565b810103126103df5751918a80610378565b8880fd5b503d6103c4565b85513d8c823e3d90fd5b50634e487b7160e01b8c5260418d52848cfd5b9093508581813d8311610433575b61041f81836105a1565b8101031261042f5751928d610315565b8b80fd5b503d610415565b87513d8e823e3d90fd5b84516321f7434560e01b81528b90fd5b845163346fafc360e21b81528b90fd5b9099508481813d8311610492575b61047c81836105a1565b8101031261048e5751986102df6102d5565b8a80fd5b503d610472565b86513d8d823e3d90fd5b5050346101315781600319360112610131576001600160a01b0360209254169051908152f35b92505034610105576020366003190112610105576104e5610548565b906001600160a01b039283855416330361053c57505016806bffffffffffffffffffffffff60a01b60015416176001557f3e3c5e6d5b512eaa5d5a80669846cfbaf8bde70fc6f7a3be9828cffc9ba5f1db8280a280f35b635c427cd960e01b8152fd5b600435906001600160a01b038216820361055e57565b600080fd5b35906001600160a01b038216820361055e57565b67ffffffffffffffff811161058b57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761058b57604052565b3d156105fe573d9067ffffffffffffffff821161058b57604051916105f2601f8201601f1916602001846105a1565b82523d6000602084013e565b606090565b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526106449161063f6064836105a1565b610646565b565b6001600160a01b031690604051604081019080821067ffffffffffffffff83111761058b576106b9916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16106b36105c3565b91610752565b80519182159184831561072b575b5050509050156106d45750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126101315782015190811515820361074f5750803880846106c7565b80fd5b919290156107b45750815115610766575090565b3b1561076f5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156107c75750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061080d575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506107ea565b356001600160a01b038116810361055e5790565b9035601e198236030181121561055e57016020813591019167ffffffffffffffff821161055e57813603831361055e57565b908060209392818452848401376000828201840152601f01601f1916010190565b9081526001600160a01b0391821660208201526060604082015261094e9291806108b684610563565b166060830152806108c960208501610563565b166080830152806108dc60408501610563565b1660a08301526108ee60608401610563565b1660c0820152608082013560e082015261093b61093061010060a08501358185015261091d60c086018661083a565b909161012086015261016085019161086c565b9260e081019061083a565b91610140605f198286030191015261086c565b90565b9290916040928381019361096485610826565b6000926001600160a01b03918216610a4b578160015416803b15610a47576109a791859187898c885196879586948593639e11bb9f60e01b85526004850161088d565b03925af19081610a34575b50610a2b577fd7a6c3876322ab4ebd36f3fbd61e9625056deb7a7b51d27b6e9f8c193a722f7795838080610a2696896109f8968a165af1506109f26105c3565b50610826565b90516001600160a01b0391821681529216602083015260408201929092524260608201529081906080820190565b0390a2565b50505050505050565b610a4090949194610577565b92386109b2565b8480fd5b9581610a5e829a9996939794959a610826565b1696610a6e876001541689610be6565b6001548551636eb1769f60e11b81523060048201529088166001600160a01b03811660248301526020826044818d5afa91821561043a578c92610bb3575b50858201809211610b9f57865163095ea7b360e01b60208201526001600160a01b03919091166024820152604480820192909252908152610af890610af26064826105a1565b89610646565b8660015416803b1561048e5799610b2d916106449a9b85838a8a5196879586948593639e11bb9f60e01b85526004850161088d565b03925af19081610b90575b50610b86577fd7a6c3876322ab4ebd36f3fbd61e9625056deb7a7b51d27b6e9f8c193a722f77936109f8610b7892610b73868a87168c610603565b610826565b0390a25b6001541690610be6565b5050505050610b7c565b610b9990610577565b38610b38565b634e487b7160e01b8c52601160045260248cfd5b9091506020813d8211610bde575b81610bce602093836105a1565b8101031261042f57519038610aac565b3d9150610bc1565b906001600160a01b036040519163095ea7b360e01b60208401521660248201526000604482015260448152608081019181831067ffffffffffffffff84111761058b576106449260405261064656fea2646970667358221220bbf7fd3f27ecea85fe9ff56f88852f0b8d14a3e55b163a55bf66b13e1852507a64736f6c63430008130033";

type ReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Receiver__factory extends ContractFactory {
  constructor(...args: ReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _executor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Receiver> {
    return super.deploy(
      _owner,
      _executor,
      overrides || {}
    ) as Promise<Receiver>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _executor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, _executor, overrides || {});
  }
  override attach(address: string): Receiver {
    return super.attach(address) as Receiver;
  }
  override connect(signer: Signer): Receiver__factory {
    return super.connect(signer) as Receiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReceiverInterface {
    return new utils.Interface(_abi) as ReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Receiver {
    return new Contract(address, _abi, signerOrProvider) as Receiver;
  }
}
