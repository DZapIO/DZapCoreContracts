/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DiamondCutFacet,
  DiamondCutFacetInterface,
} from "../../../../contracts/Shared/Facets/DiamondCutFacet";

const _abi = [
  {
    inputs: [],
    name: "CalldataEmptyButInitNotZero",
    type: "error",
  },
  {
    inputs: [],
    name: "FacetAddressIsNotZero",
    type: "error",
  },
  {
    inputs: [],
    name: "FacetAddressIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "FacetContainsNoCode",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionIsImmutable",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectFacetCutAction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "reason",
        type: "bytes",
      },
    ],
    name: "InitReverted",
    type: "error",
  },
  {
    inputs: [],
    name: "InitZeroButCalldataNotEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "NoSelectorsInFace",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyContractOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610db2908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c631f931c1c1461002857600080fd5b346107cb5760603660031901126107cb5767ffffffffffffffff600435116107cb573660236004350112156107cb57600435600401359067ffffffffffffffff82116107cb573660248360051b6004350101116107cb576001600160a01b0360243516602435036107cb5767ffffffffffffffff604435116107cb573660236044350112156107cb5767ffffffffffffffff60443560040135116107cb57366024604435600401356044350101116107cb576001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633036107e6575061011d6101188261081b565b6107f5565b90602082828152018091602460043501915b60248260051b6004350101831061069457838561015461011860443560040135610833565b60443560048101358083529060240160208301376000602060443560040135830101526000915b80518310156104bb576020610190848361084f565b51015160038110156104a557806102d557506001600160a01b036101b4848361084f565b5151169160406101c4858461084f565b510151918251156102c35783156102b1576001600160601b03610207856001600160a01b0316600052600080516020610d5d833981519152602052604060002090565b54169182156102a3575b6000925b845184101561028e576001600160e01b0319610231858761084f565b511680600052600080516020610d3d8339815191526020526001600160a01b036040600020541661027c578682610267926109c9565b600193840193016001600160601b0316610215565b60405163a023275d60e01b8152600490fd5b50949150949250600191505b0191909261017b565b6102ac8561090e565b610211565b604051636347641d60e11b8152600490fd5b6040516307bc559560e41b8152600490fd5b600181036103e557506001600160a01b036102f0848361084f565b515116916040610300858461084f565b510151918251156102c35783156102b1576001600160601b03610343856001600160a01b0316600052600080516020610d5d833981519152602052604060002090565b54169182156103d7575b6000925b84518410156103c7576001600160e01b031961036d858761084f565b511680600052600080516020610d3d8339815191526020526001600160a01b03604060002054169087821461027c57826103bd89600195846103b888966001600160601b0398610abb565b6109c9565b0116930192610351565b509491509492506001915061029a565b6103e08561090e565b61034d565b600203610493576001600160a01b036103fe848361084f565b51511691604061040e858461084f565b510151928351156102c3576104815760005b83518110156104745760019061046e6001600160e01b0319610442838861084f565b511680600052600080516020610d3d8339815191526020526001600160a01b0360406000205416610abb565b01610420565b509260019194925061029a565b604051633ce4ef9160e11b8152600490fd5b60405163e548e6b560e01b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b9091506040519060608201906060835251809152608082019060808160051b84010194916000905b82821061060057857f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67386806105318b6001600160a01b03602435166020840152828103604084015285610879565b0390a16024356001600160a01b031661055d575161054b57005b6040516304c08b4360e51b8152600490fd5b8051156105ee5760008091306001600160a01b0360243516036105de575b6020815191016024355af43d156105d6573d9061059a61011883610833565b9182523d6000602084013e5b156105ad57005b604051630d7ddfa560e11b8152602060048201529081906105d2906024830190610879565b0390fd5b6060906105a6565b6105e9602435610d23565b61057b565b60405163211002b360e11b8152600490fd5b90919295607f1985820301825286516001600160a01b03815116825260208101519060038210156104a5576040916020840152015190606060408201526020608060608301928451809452019201906000905b808210610671575050506020806001929801920192019092916104e3565b82516001600160e01b031916845260209384019390920191600190910190610653565b823567ffffffffffffffff81116107cb5760606004358201360360231901126107cb576040519081606081011067ffffffffffffffff6060840111176107d057606082016040526024816004350101356001600160a01b03811681036107cb578252600360448260043501013510156107cb576004358101604481013560208401526064013567ffffffffffffffff81116107cb57366043828460043501010112156107cb5760248183600435010101356107516101188261081b565b9260208483815201903660448460051b868460043501010101116107cb5760448482600435010101915b60448460051b86846004350101010183106107a8575050505050604082015281526020928301920161012f565b82356001600160e01b0319811690036107cb57823581526020928301920161077b565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6304efaedf60e31b8152600490fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176107d057604052565b67ffffffffffffffff81116107d05760051b60200190565b67ffffffffffffffff81116107d057601f01601f191660200190565b80518210156108635760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b919082519283825260005b8481106108a5575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610884565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e8054821015610863576000527fb5c239a29faf02594141bbc5e6982a9b85ba2b4d59c3ed3baaf4cb8e5e11cbef0190600090565b61091781610d23565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e908154916001600160a01b038216600052600080516020610d5d83398151915260205282600160406000200155600160401b8310156107d057826109849160016109a4950190556108b9565b90919082549060031b916001600160a01b03809116831b921b1916179055565b565b919091805483101561086357600052601c60206000208360031c019260021b1690565b929163ffffffff60e01b8416916001600160a01b03600092848452610a22600080516020610d3d833981519152938460205260408620906001600160a01b038254916001600160601b0360a01b9060a01b169116179055565b1692838352600080516020610d5d83398151915260205260408320805490600160401b821015610aa75796610a648260409798996001610a81950181556109a6565b90919063ffffffff83549160031b9260e01c831b921b1916179055565b825260205220805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b634e487b7160e01b85526041600452602485fd5b9190916001600160a01b038091168015610d1157308114610cff5763ffffffff60e01b809416600092818452600080516020610d3d833981519152926020918483526040948587205460a01c90838852600080516020610d5d8339815191529586865287892054926000199b8c8501948511610ceb57908991888c898c89808703610c7d575b505090525050508787525087892080548015610c69578c0190610b6482826109a6565b63ffffffff82549160031b1b191690555588528452868681205515610b8e575b5050505050509050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e8054898101908111610c5557838852858552826001888a20015491808303610c23575b5050508054988915610c0f5760019798990191610bee836108b9565b909182549160031b1b19169055558552528220015580388080808080610b84565b634e487b7160e01b88526031600452602488fd5b610c2c906108b9565b90549060031b1c16610c4181610984846108b9565b885285855260018789200155388281610bd2565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b8b52603160045260248bfd5b610cde9784610a6493610c9c8a9487610cb29952828a528484206109a6565b90549060031b1c60e01b978896835252206109a6565b168b52838852898b20906001600160a01b038254916001600160601b0360a01b9060a01b169116179055565b873880888c898c89610b41565b634e487b7160e01b8b52601160045260248bfd5b60405163c3c5ec3760e01b8152600490fd5b604051631535ac5f60e31b8152600490fd5b3b15610d2b57565b6040516271a80360e91b8152600490fdfec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131cc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131da2646970667358221220a59bba200d6b3c5591158860d72a3150cef41eb7a400dc39e14ecc118253991b64736f6c63430008130033";

type DiamondCutFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondCutFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondCutFacet__factory extends ContractFactory {
  constructor(...args: DiamondCutFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiamondCutFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondCutFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondCutFacet {
    return super.attach(address) as DiamondCutFacet;
  }
  override connect(signer: Signer): DiamondCutFacet__factory {
    return super.connect(signer) as DiamondCutFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondCutFacetInterface {
    return new utils.Interface(_abi) as DiamondCutFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondCutFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondCutFacet;
  }
}
