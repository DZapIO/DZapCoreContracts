/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  FeesFacet,
  FeesFacetInterface,
} from "../../../../contracts/Shared/Facets/FeesFacet";

const _abi = [
  {
    inputs: [],
    name: "FeeTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "IntegratorNotActive",
    type: "error",
  },
  {
    inputs: [],
    name: "ShareTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "UnAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetDzapFixedNativeFeeAmount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetDzapTokenFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetFixedNativeFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "integrator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum FeeType[]",
        name: "feeType",
        type: "uint8[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedNativeFeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapTokenShare",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapFixedNativeShare",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct FeeInfo[]",
        name: "info",
        type: "tuple[]",
      },
    ],
    name: "SetIntegrator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetMaxPlatformFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetPlatformFee",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "enum FeeType",
        name: "_feeType",
        type: "uint8",
      },
    ],
    name: "calcFixedNativeFees",
    outputs: [
      {
        internalType: "uint256",
        name: "fixedNativeFeeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dzapShare",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "enum FeeType",
        name: "_feeType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "calcTokenFees",
    outputs: [
      {
        internalType: "uint256",
        name: "totalFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dzapShare",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "enum FeeType",
        name: "_feeType",
        type: "uint8",
      },
    ],
    name: "integratorFeeInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedNativeFeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapTokenShare",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapFixedNativeShare",
            type: "uint256",
          },
        ],
        internalType: "struct FeeInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
    ],
    name: "isIntegratorAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxFixedNativeFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "_maxFixedNativeFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxTokenFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolFeeVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
    ],
    name: "removeIntegrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "enum FeeType[]",
        name: "_feeTypes",
        type: "uint8[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedNativeFeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapTokenShare",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapFixedNativeShare",
            type: "uint256",
          },
        ],
        internalType: "struct FeeInfo[]",
        name: "_feeInfo",
        type: "tuple[]",
      },
    ],
    name: "setIntegratorInfo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_protocolFeeVault",
        type: "address",
      },
    ],
    name: "setProtocolFeeVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610a71908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908163340a15fd146108165750806335e926ac1461079b578063380b1b18146106ce5780634ec7d3b51461069157806358fc9081146105bb57806387a38d9b1461058e57806388e95c47146104ea578063af1af3b9146104a4578063b07986b91461041e5763d3dfad661461008f57600080fd5b3461041b57606036600319011261041b576100a8610855565b67ffffffffffffffff90816024351161041357366023602435011215610413578160243560040135116104135736602480356004013560051b8135010111610413576044918083351161041757366023843501121561041757823560040135116104135736602483356004013560071b8435010111610413576001600160a01b0391827fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163303610406575b828216156103f457835b6024356004013581106102595750906040519260608401911683526020906060828501526024356004013590526080918284016024803501865b60243560040135811061022e575050808584920360408701528235600401358152019260248235019286905b83356004013582106101fb57877f614440618e39561ec60abb0eee0a1e5b4f7dee012bf7532addd0434df9c01fce88880389a180f35b843586528481013586820152604080860135908701526060808601359087015294820194938201936001909101906101c5565b90918295939495359060028210156102555790815292949392840191840190600101610199565b8880fd5b8135600401358110156103e0578060071b82350190608060231983360301126103dc5761028461089f565b916024810135835283810135602084015260846064820135918260408601520135806060850152620f4240808093119182156103d2575b50506103c0578251908111908115610395575b506103835760208201517fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fdd54106103835760ff61030a856108d5565b54161561036a575b6001918261031f866108d5565b0160248360051b8135010135600292838210156103665761034460609260039461090d565b938151855560208201518786015560408201519085015501519101550161015f565b8980fd5b610373846108d5565b805460ff19166001179055610312565b60405163cd4e616760e01b8152600490fd5b90507fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fdc5410386102ce565b604051630a81ff1360e21b8152600490fd5b11905081386102bb565b8580fd5b634e487b7160e01b85526032600452602485fd5b60405163d92e233d60e01b8152600490fd5b61040e61095f565b610155565b8280fd5b8380fd5b80fd5b503461041b57602036600319011261041b5761047161043b610855565b6001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163303610497576108d5565b805460ff8116156104855760ff1916905580f35b604051630ee8b4d760e01b8152600490fd5b61049f61095f565b6108d5565b503461041b578060031936011261041b5760206001600160a01b037fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fde5416604051908152f35b503461041b57602036600319011261041b57610504610855565b6001600160a01b0390817fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163303610581575b1680156103f4577fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fde805473ffffffffffffffffffffffffffffffffffffffff1916909117905580f35b61058961095f565b610538565b503461041b57602036600319011261041b57602060ff6105af61049f610855565b54166040519015158152f35b503461041b57606036600319011261041b576105d5610855565b60243590600282101561041357604092916001600160a01b0361062d926105fa61093b565b501683527fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fdb60205260018484200161090d565b61063561089f565b90805491828152600182015460208201526060600360028401549384888501520154910152829180610670575b505082519182526020820152f35b61068391935061068a92506044356109c4565b91826109c4565b3880610662565b503461041b578060031936011261041b5760207fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fdd54604051908152f35b503461041b576060906107216106e336610870565b6001600160a01b038493921684527fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fdb6020526001604085200161090d565b9161072a61089f565b835481526003600185015494856020840152600281015460408401520154948591015282158015610766575b6040848482519182526020820152f35b909150838302938385041417156107875750620f4240604092043880610756565b634e487b7160e01b81526011600452602490fd5b503461041b5760806107ca6107c460016107b436610870565b92906107be61093b565b506108d5565b0161090d565b6107d261089f565b815491828252600181015460208301908152606060036002840154936040860194855201549301928352604051938452516020840152516040830152516060820152f35b9050346108515781600319360112610851576020907fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fdc548152f35b5080fd5b600435906001600160a01b038216820361086b57565b600080fd5b604090600319011261086b576004356001600160a01b038116810361086b5790602435600281101561086b5790565b604051906080820182811067ffffffffffffffff8211176108bf57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03166000527fce396784280ca8c28b49c2b35d3831ae85d835e669ecffd49f1b7f40af160fdb602052604060002090565b90600281101561092557600052602052604060002090565b634e487b7160e01b600052602160045260246000fd5b61094361089f565b9060008252600060208301526000604083015260006060830152565b63ffffffff60e01b600035166000527f075a38625ef0b246753147848d592c62b62122f46a8fd0865dd31aa776ea07a2602052604060002033600052602052600160ff604060002054161515036109b257565b60405163be24598360e01b8152600490fd5b90919060001983820983820291828083109203948286039260009614610a2d57620f42409183831115610a29577fde8f6cefed634549b62c77574f722e1ac57e23f24d8fd5cb790fb65668c261399596500990828211900360fa1b910360061c170290565b8680fd5b505050620f4240919250049056fea26469706673582212207b8f74028d7cb19455a65a7782ef98aecf95a0f5738024faee184ebc3f6dd14c64736f6c63430008130033";

type FeesFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeesFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeesFacet__factory extends ContractFactory {
  constructor(...args: FeesFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeesFacet> {
    return super.deploy(overrides || {}) as Promise<FeesFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeesFacet {
    return super.attach(address) as FeesFacet;
  }
  override connect(signer: Signer): FeesFacet__factory {
    return super.connect(signer) as FeesFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeesFacetInterface {
    return new utils.Interface(_abi) as FeesFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeesFacet {
    return new Contract(address, _abi, signerOrProvider) as FeesFacet;
  }
}
