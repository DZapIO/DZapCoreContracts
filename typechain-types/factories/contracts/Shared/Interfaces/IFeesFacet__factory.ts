/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IFeesFacet,
  IFeesFacetInterface,
} from "../../../../contracts/Shared/Interfaces/IFeesFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetDzapFixedNativeFeeAmount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetDzapTokenFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetFixedNativeFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "integrator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum FeeType[]",
        name: "feeType",
        type: "uint8[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedNativeFeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapTokenShare",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapFixedNativeShare",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct FeeInfo[]",
        name: "info",
        type: "tuple[]",
      },
    ],
    name: "SetIntegrator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetMaxPlatformFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetPlatformFee",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "enum FeeType",
        name: "_feeType",
        type: "uint8",
      },
    ],
    name: "calcFixedNativeFees",
    outputs: [
      {
        internalType: "uint256",
        name: "fixedNativeFeeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dzapShare",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "enum FeeType",
        name: "_feeType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "calcTokenFees",
    outputs: [
      {
        internalType: "uint256",
        name: "totalFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dzapShare",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "enum FeeType",
        name: "_feeType",
        type: "uint8",
      },
    ],
    name: "integratorFeeInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedNativeFeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapTokenShare",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapFixedNativeShare",
            type: "uint256",
          },
        ],
        internalType: "struct FeeInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
    ],
    name: "isIntegratorAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxFixedNativeFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "_maxFixedNativeFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxTokenFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolFeeVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
    ],
    name: "removeIntegrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "enum FeeType[]",
        name: "_feeTypes",
        type: "uint8[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedNativeFeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapTokenShare",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dzapFixedNativeShare",
            type: "uint256",
          },
        ],
        internalType: "struct FeeInfo[]",
        name: "_feeInfo",
        type: "tuple[]",
      },
    ],
    name: "setIntegratorInfo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_protocolFeeVault",
        type: "address",
      },
    ],
    name: "setProtocolFeeVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IFeesFacet__factory {
  static readonly abi = _abi;
  static createInterface(): IFeesFacetInterface {
    return new utils.Interface(_abi) as IFeesFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IFeesFacet {
    return new Contract(address, _abi, signerOrProvider) as IFeesFacet;
  }
}
