/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  LibPermit,
  LibPermitInterface,
} from "../../../../contracts/Shared/Libraries/LibPermit";

const _abi = [
  {
    inputs: [],
    name: "InvalidPermit",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPermitData",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220cf4143bd18b8e588ecae800f37e2f07be27cb42cb5ec8d17e67942cac7ed898564736f6c63430008130033";

type LibPermitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibPermitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibPermit__factory extends ContractFactory {
  constructor(...args: LibPermitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibPermit> {
    return super.deploy(overrides || {}) as Promise<LibPermit>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibPermit {
    return super.attach(address) as LibPermit;
  }
  override connect(signer: Signer): LibPermit__factory {
    return super.connect(signer) as LibPermit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibPermitInterface {
    return new utils.Interface(_abi) as LibPermitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibPermit {
    return new Contract(address, _abi, signerOrProvider) as LibPermit;
  }
}
