/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SwapFacet,
  SwapFacetInterface,
} from "../../../../contracts/Swap/Facets/SwapFacet";

const _abi = [
  {
    inputs: [],
    name: "AllSwapsFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ContractCallNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "contractBalance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "IntegratorNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidContract",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPermit",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPermitData",
    type: "error",
  },
  {
    inputs: [],
    name: "NativeTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "NoSwapFromZeroBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "NoTransferToNullAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NullAddrIsNotAValidSpender",
    type: "error",
  },
  {
    inputs: [],
    name: "NullAddrIsNotAnERC20Token",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "leftOverAmount",
        type: "uint256",
      },
    ],
    name: "PartialSwap",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyError",
    type: "error",
  },
  {
    inputs: [],
    name: "SliceOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "SliceOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
    ],
    name: "SlippageTooHigh",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "reason",
        type: "bytes",
      },
    ],
    name: "SwapCallFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "integrator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "refundee",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "dex",
            type: "address",
          },
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "toToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "leftOverFromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "returnToAmount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct SwapInfo[]",
        name: "swapInfo",
        type: "tuple[]",
      },
    ],
    name: "MultiSwapped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "integrator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "refundee",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "dex",
            type: "address",
          },
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "toToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "leftOverFromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "returnToAmount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct SwapInfo",
        name: "swapInfo",
        type: "tuple",
      },
    ],
    name: "Swapped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "dex",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "fromAssetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "toAssetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "toAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "leftoverFromAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "SwappedTokens",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_transactionId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_refundee",
        type: "address",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minToAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapCallData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
        ],
        internalType: "struct SwapData[]",
        name: "_data",
        type: "tuple[]",
      },
    ],
    name: "multiSwap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_transactionId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_refundee",
        type: "address",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minToAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapCallData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
        ],
        internalType: "struct SwapData[]",
        name: "_data",
        type: "tuple[]",
      },
    ],
    name: "multiSwapWithoutRevert",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_transactionId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_integrator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_refundee",
        type: "address",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minToAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapCallData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes",
          },
        ],
        internalType: "struct SwapData",
        name: "_data",
        type: "tuple",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657612448908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c908163736753851461004a5750806380254d04146100455763ddf39aa81461004057600080fd5b6106a9565b610498565b61005336610420565b93929491906000805160206123f383398151915260018154146103f957600190556001600160a01b038616156103e857479485348103116103e3576001600160a01b0383161580156103dc575b6103ca576100ad8161225e565b91889089905b83821061016f5750501461015d577fad51fe56cc5276f8ece14ee1967cc33a5d5a6248acefdf3764d1a5e4e84f2cbb916100ed8585611419565b610109604051928392896001600160a01b03339916978561234a565b0390a3473482038111156101555761012491349003906108cd565b80610145575b8261014260006000805160206123f383398151915255565b80f35b61014e91610cb6565b818061012a565b505081610124565b60405163483f15e560e01b8152600490fd5b9091868a61018761018186888761230f565b8b61108e565b61019e82610199898b8a97969761230f565b610ac0565b9490938d8a876102a75791505061029b95506102a19694506101ce93506101c992508891508761230f565b6108da565b6101e460406101de888a8961230f565b016108da565b8761024881610238608061020b8c6102048d6101de8360609a8b9361230f565b948d61230f565b013594610228610219610970565b6001600160a01b039098168852565b6001600160a01b03166020870152565b6001600160a01b03166040850152565b8201528d60808201528d60a08201526102618689612336565b5261026c8588612336565b5061029661028060406101de888a8961230f565b8d608061028e898b8a61230f565b013591610cc9565b6122ea565b926122ea565b906100b3565b848b989692948896948a9995966102d76102a19d9f988f60406101de8c6102dd9a6102d19461230f565b936108cd565b926115bb565b8a826103ae575b61030693508592508d9150610301906101de60609889928d61230f565b610cc9565b876103156101c986838a61230f565b936103868861037660806103498a61033360406101de838b8961230f565b97610343886101de84848a61230f565b9561230f565b013594610366610357610970565b6001600160a01b03909a168a52565b6001600160a01b03166020890152565b6001600160a01b03166040870152565b840152608083015260a082015261039d8288612336565b526103a88187612336565b506122ea565b60406101de6103c195610301938d61230f565b82818f8a6102e4565b60405163d92e233d60e01b8152600490fd5b50876100a0565b6108b7565b63d92e233d60e01b60805260046080fd5b6329f745a760e01b60805260046080fd5b6001600160a01b0381160361041b57565b600080fd5b9060a060031983011261041b576004359160243561043d8161040a565b9160443561044a8161040a565b916064356104578161040a565b9160843567ffffffffffffffff9283821161041b578060238301121561041b57816004013593841161041b5760248460051b8301011161041b576024019190565b60031960a03682011261041b57600435906024356104b58161040a565b604435926104c28461040a565b6064356104ce8161040a565b6084359067ffffffffffffffff821161041b576101008260040195833603011261041b576000805160206123f3833981519152600181541461069757600190556001600160a01b03808716156103ca5747953487039687116103e35781831615801561068f575b6103ca576102d18893868860847f8037eb1559c848161c00ae628d6fc02ac9357c108cf6130f297a2c9460ca51439861060c876105a061057861062d9a8761108e565b90976105848985610bc7565b9990986105918184611419565b6102d78460448a019e8f6108da565b8461067c575b6105fc6105d16105cb6105c560648701946101c98b8d610301896108da565b9a6108da565b926108da565b916105ec6105dd610970565b6001600160a01b03909b168b52565b6001600160a01b031660208a0152565b6001600160a01b03166040880152565b01356060850152608084015260a083015260405194859433991697856109cc565b0390a360009047818111156106755761064692506108cd565b80610665575b61066360006000805160206123f383398151915255565b005b61066e91610cb6565b388061064c565b5050610646565b61068a858c6103018b6108da565b6105a6565b506000610535565b6040516329f745a760e01b8152600490fd5b6106b236610420565b6000805160206123f3833981519152959291949395600181541461069757600190556001600160a01b0391828716156103ca5747953487039687116103e3578382161580156108af575b6103ca5782939161070d899461225e565b916000955b80871061075d5750507fad51fe56cc5276f8ece14ee1967cc33a5d5a6248acefdf3764d1a5e4e84f2cbb94509061062d9161074d8888611419565b604051948594339916978561234a565b919395808294968a8261077181888861230f565b61077b908361108e565b938d858361078a868d8d61230f565b9061079491610bc7565b97819791958d8d60409c8d926107a99261230f565b016107b3906108da565b916107bd916108cd565b916107c7946115bb565b8886831515996108879a610893575b93505092505060606107f2858c610301846101de8c898961230f565b6108726108036101c989868661230f565b96610822836101de8b8861081c866101de84848d61230f565b9861230f565b906108628d6108358c6080998a9361230f565b013595610852610843610970565b6001600160a01b03909c168c52565b6001600160a01b031660208b0152565b8801906001600160a01b03169052565b85015283015260a082015261039d8288612336565b94929091899492610712565b6108a495610301936101de9261230f565b83818f88868b6107d6565b5060006106fc565b634e487b7160e01b600052601160045260246000fd5b919082039182116103e357565b356108e48161040a565b90565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761091957604052565b6108e7565b67ffffffffffffffff811161091957604052565b6040810190811067ffffffffffffffff82111761091957604052565b90601f8019910116810190811067ffffffffffffffff82111761091957604052565b6040519060c0820182811067ffffffffffffffff82111761091957604052565b6040519061099d826108fd565b565b604051906060820182811067ffffffffffffffff82111761091957604052565b6040519061099d82610932565b60609195949261099d9461012083019783526001600160a01b038092166020840152166040820152019060a080916001600160a01b03808251168552806020830151166020860152604082015116604085015260608101516060850152608081015160808501520151910152565b903590601e198136030182121561041b570180359067ffffffffffffffff821161041b5760200191813603831361041b57565b67ffffffffffffffff811161091957601f01601f191660200190565b929192610a9582610a6d565b91610aa3604051938461094e565b82948184528183011161041b578281602093846000960137010152565b9073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b036040840135610aec8161040a565b16148015610bac575b80610b5c575b80610b25575b15610b1357610b0f91611cb5565b9091565b604051632514e60160e21b8152600490fd5b50610b57610b32836108da565b610b51610b4c610b4560c0870187610a3a565b3691610a89565b6113c0565b90610c5b565b610b01565b5060ff610ba58335610b6d8161040a565b6001600160a01b03166000527f87c11dafdbe0f066e67358ee4040ba0de12255453b9477c97fa61212e07ca30c602052604060002090565b5416610afb565b5060ff610bc06020840135610b6d8161040a565b5416610af5565b9073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b036040840135610bf38161040a565b16148015610c40575b80610c28575b80610c16575b15610b1357610b0f91611e3c565b50610c23610b32836108da565b610c08565b5060ff610c398335610b6d8161040a565b5416610c02565b5060ff610c546020840135610b6d8161040a565b5416610bfc565b610c996001916001600160a01b03166000527f87c11dafdbe0f066e67358ee4040ba0de12255453b9477c97fa61212e07ca30c602052604060002090565b019063ffffffff60e01b1660005260205260ff6040600020541690565b9080610cc0575050565b61099d91610dde565b9291909281610cd9575b50509050565b6001600160a01b03169273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8403610d1157610d09929350610dde565b803880610cd3565b6040516370a0823160e01b815230600482015293602085602481845afa948515610da957600095610d79575b50848311610d5557610d50939450610e6d565b610d09565b60405163cf47918160e01b81526004810184905260248101869052604490fd5b0390fd5b610d9b91955060203d8111610da2575b610d93818361094e565b810190610e52565b9338610d3d565b503d610d89565b610e61565b3d15610dd9573d90610dbf82610a6d565b91610dcd604051938461094e565b82523d6000602084013e565b606090565b6001600160a01b03811615610e4057478211610e1f57600080809381935af1610e05610dae565b5015610e0d57565b604051633d2cec6f60e21b8152600490fd5b5060405163cf47918160e01b81526004810191909152476024820152604490fd5b6040516321f7434560e01b8152600490fd5b9081602091031261041b575190565b6040513d6000823e3d90fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604482019290925261099d91610eb082606481015b03601f19810184528361094e565b6001600160a01b031690610f10604051610ec981610932565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1610f0a610dae565b91610fad565b805191821591848315610f82575b505050905015610f2b5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b919381809450010312610fa957820151908115158203610fa6575080388084610f1e565b80fd5b5080fd5b9192901561100f5750815115610fc1575090565b3b15610fca5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156110225750805190602001fd5b60405162461bcd60e51b815260206004820152908190610d75906024830190611069565b60005b8381106110595750506000910152565b8181015183820152602001611049565b9060209161108281518092818552858086019101611046565b601f01601f1916010190565b9060ff6110cd836001600160a01b03166000527fadf38b383de83e03163f4bb9c9eeeeff060c277df907ebce1fd27038d38e2e08602052604060002090565b541615611172576040810173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0382356111008161040a565b160361111e575b506080611116610b0f936116f8565b91013561165f565b6080820135801561116057610b0f936111586111169261113f6080956108da565b61114c60e0880188610a3a565b929091309033906111a4565b935050611107565b60405163162908e360e11b8152600490fd5b604051630f52085360e31b8152600490fd5b6003111561118e57565b634e487b7160e01b600052602160045260246000fd5b949390919293810160408282031261041b57813591600383101561041b5760208101359067ffffffffffffffff821161041b57019080601f8301121561041b578160206111f393359101610a89565b906111fd81611184565b8061121657509361121161099d9582611be5565b61124c565b806112276001929795939697611184565b036112395750509061099d9291611ae0565b6001600160a01b0361099d951691611797565b916001600160a01b038093169273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee841461135857811615610e40576040516370a0823160e01b8082526001600160a01b03831660048301526020949092908583602481845afa938415610da95787879460009661132f575b506112c990846112ed97988561136a565b6040518095819482938352600483019190916001600160a01b036020820193169052565b03915afa908115610da95761130b93600092611312575b50506108cd565b0361116057565b6113289250803d10610da257610d93818361094e565b3880611304565b6112ed9650908461134f6112c993883d8a11610da257610d93818361094e565b975050906112b8565b60405163346fafc360e21b8152600490fd5b9290604051926323b872dd60e01b60208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff8411176109195761099d92604052610eb0565b8051156113ce576020015190565b50600090565b906040516113e1816108fd565b6060600382948054845260018101546020850152600281015460408501520154910152565b818102929181159184041417156103e357565b611455826001600160a01b03166000527fadf38b383de83e03163f4bb9c9eeeeff060c277df907ebce1fd27038d38e2e08602052604060002090565b611467611463825460ff1690565b1590565b61117257611485600161148a92016001600052602052604060002090565b6113d4565b9160208301516000938161153a575b507f5a5e26d1ba5745deaa746a9beb2d7bfa1e6b4e772d13d55a574f5c1e162d39de916114f66114d6866001600160a01b0394816114fb576108cd565b604080516001815260208101989098528701529116939081906060820190565b0390a3565b611535826115307fadf38b383de83e03163f4bb9c9eeeeff060c277df907ebce1fd27038d38e2e0b546001600160a01b031690565b610dde565b6108cd565b6001600160a01b03919450916114f66114d661158761157e60607f5a5e26d1ba5745deaa746a9beb2d7bfa1e6b4e772d13d55a574f5c1e162d39de97015189611406565b620f4240900490565b8761159382809a6108cd565b6115a3575b945050505091611499565b6115b66115b083836108cd565b86610dde565b611598565b92916080917fdbff15bf7c10a4fcd5d083f8297e5e7653625aab6c4c8548c23686f8118a1325938061164f575b86611615575b60405196600188526001600160a01b038094166020890152604088015260608701521693a3565b61164a876001600160a01b037fadf38b383de83e03163f4bb9c9eeeeff060c277df907ebce1fd27038d38e2e0b541685610cc9565b6115ee565b61165a818385610cc9565b6115e8565b90916000926000928151908161167457505050565b60409295506108e4939450906116899161168e565b930151835b90600019818309818302918280831092039180830392146116ec57620f4240908282111561041b577fde8f6cefed634549b62c77574f722e1ac57e23f24d8fd5cb790fb65668c26139940990828211900360fa1b910360061c170290565b5050620f424091500490565b60036001600160a01b0391606060409384928351611715816108fd565b6000938185809352826020820152828782015201521681527fadf38b383de83e03163f4bb9c9eeeeff060c277df907ebce1fd27038d38e2e08602052600182822001600182526020522082519261176b846108fd565b81548452600182015460208501526002820154908401520154606082015290565b600091031261041b57565b9293906001600160a01b037fa5e67a2ca7abbd3d386941b8010a32368804ac328a911a128f9ea68fdba5470f54169185815180611840575b505050813b1561041b57604051631b63c28b60e11b81526001600160a01b039485166004820152908416602482015291831660448301529190921660648301526000908290818381608481015b03925af18015610da95761182d5750565b8061183a61099d9261091e565b8061178c565b6118a961185b8460208061188b9561189a9801019101611977565b97929361187b61186c979297610990565b6001600160a01b039099168952565b6001600160a01b03166020880152565b65ffffffffffff166040860152565b65ffffffffffff166060840152565b6118b161099f565b9182523060208301526040820152833b1561041b576040516302b67b5760e41b815291600091839182916118ea919033600485016119ce565b038183875af18015610da957611902575b85816117cf565b8061183a61190f9261091e565b386118fb565b519065ffffffffffff8216820361041b57565b9092919261193581610a6d565b91611943604051938461094e565b82948284528282011161041b57602061099d930190611046565b9080601f8301121561041b5781516108e492602001611928565b91909160a08184031261041b57805161198f8161040a565b9261199c60208301611915565b926119a960408401611915565b92606081015192608082015167ffffffffffffffff811161041b576108e4920161195d565b906108e493926040916001600160a01b03809116845281518181511660208601528160208201511684860152606065ffffffffffff9182868201511682880152015116608085015260208201511660a0840152015160c0820152610100908160e08201520190611069565b9160608383031261041b57825192602081015192604082015167ffffffffffffffff811161041b576108e4920161195d565b9192611ac96108e4959460406001600160a01b0394611a9e878251602080916001600160a01b0381511684520151910152565b60208181015188840152910151606087015281516001600160a01b03166080870152015160a0850152565b1660c0820152610100908160e08201520190611069565b7fa5e67a2ca7abbd3d386941b8010a32368804ac328a911a128f9ea68fdba5470f549092916001600160a01b0391611b249083169160208082518301019101611a39565b939091921691611b44611b356109bf565b6001600160a01b039097168752565b846020870152611b5261099f565b95865260208601526040850152611b676109bf565b308152926020840152803b1561041b5761181c93600080946040519687958694859363187945bd60e11b8552339160048601611a6b565b906004916323f2ebc360e21b8152611bbf8251809360208685019101611046565b010190565b9060049163d505accf60e01b8152611bbf8251809360208685019101611046565b90805180611bf257505050565b60009060e08103611c4f575050600091829182604051611c2881611c1a602082019586611bc4565b03601f19810183528261094e565b51925af1611c34610dae565b505b15611c3d57565b60405163ddafbaef60e01b8152600490fd5b90929061010003611c8457829182604051611c7281611c1a602082019586611b9e565b51925af1611c7e610dae565b50611c36565b604051636abdccad60e11b8152600490fd5b908092918237016000815290565b9060206108e4928181520190611069565b90611ccb611463611cc5846108da565b3b151590565b611e2a576080820135908115611e1857611ce4916108cd565b6040820190611cfa611cf5836108da565b611f2b565b9160608401611d0b611cf5826108da565b906000611d3c611d1a856108da565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b15611df05750600080855b611d50896108da565b90611d5e60c08b018b610a3a565b9190611d6f60405180948193611c96565b03925af1611d7b610dae565b5015611de25760a091611535611cf5611d93936108da565b940135808510611dc15750611dbe9291611db2611cf5611db8936108da565b926108cd565b906108cd565b91565b604051633b5d56ed60e11b8152600481019190915260248101859052604490fd5b505050505050600090600090565b60008091611e1387611e01886108da565b611e0d60208d016108da565b90611f9e565b611d47565b60405163391b81e760e21b8152600490fd5b6040516303777f6960e51b8152600490fd5b90611e4c611463611cc5846108da565b611e2a576080820135908115611e1857611e65916108cd565b6040820190611e76611cf5836108da565b9160608401611e87611cf5826108da565b906000611e96611d1a856108da565b15611f155750600080855b611eaa896108da565b90611eb860c08b018b610a3a565b9190611ec960405180948193611c96565b03925af1611ed5610dae565b9015611eee575060a091611535611cf5611d93936108da565b80611efb610d7592612165565b5060405163729a0b5b60e01b815291829160048301611ca4565b60008091611f2687611e01886108da565b611ea1565b6000906001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8103611f585750504790565b6020602491604051928380926370a0823160e01b82523060048301525afa918215610da95791611f86575090565b6108e4915060203d8111610da257610d93818361094e565b906001600160a01b038092169173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee83146120115781161561205357604051636eb1769f60e11b81523060048201526001600160a01b038216602482015292602084604481865afa938415610da957600094612033575b50808410612017575b50505050565b61202a93612024916108cd565b91612081565b38808080612011565b61204c91945060203d8111610da257610d93818361094e565b9238612008565b6040516363ba9bff60e01b8152600490fd5b90601f82018092116103e357565b60040190816004116103e357565b604051636eb1769f60e11b81523060048201526001600160a01b03831660248201529192602083806044810103816001600160a01b0386165afa928315610da95760009361210e575b5082018092116103e35760405163095ea7b360e01b60208201526001600160a01b039093166024840152604483019190915261099d9190610eb08260648101610ea2565b61212791935060203d8111610da257610d93818361094e565b91386120ca565b60208183031261041b5780519067ffffffffffffffff821161041b57019080601f8301121561041b5781516108e492602001611928565b90815191604483106122425760031990838201908482116103e3578161218a81612065565b1061223057805161219a83612073565b1161221e57816121ca5750505090506108e460405160008152602081016040525b6020808251830101910161212e565b9390600460405193601f8316801560051b9182828801019586010197010101945b80831061220b57508252601f01601f19166040529091506108e4906121bb565b85518352602095860195909201916121eb565b604051633b99b53d60e01b8152600490fd5b6040516323d5783d60e11b8152600490fd5b9150565b67ffffffffffffffff81116109195760051b60200190565b9061226882612246565b60406122768151928361094e565b8382528193612287601f1991612246565b019060005b8281106122995750505050565b81519060c082019180831067ffffffffffffffff84111761091957602092845260008152826000818301526000858301526000606083015260006080830152600060a083015282870101520161228c565b60001981146103e35760010190565b634e487b7160e01b600052603260045260246000fd5b91908110156123315760051b8101359060fe198136030182121561041b570190565b6122f9565b80518210156123315760209160051b010190565b60a090929192608081019381526001600160a01b038095602096879516858401521660408201526080606082015285518094520193019160005b828110612392575050505090565b909192938260c0826123e6600194895160a080916001600160a01b03808251168552806020830151166020860152604082015116604085015260608101516060850152608081015160808501520151910152565b0195019392910161238456fea4b36ced7e8b039500cc9c7c393a04e0c8af96ee265b143e79175cc5679ca539a26469706673582212206fb071eb585a4290efd513d067e38ed68bbfef930ea9ecb9e1a7502fbbc5e2f064736f6c63430008130033";

type SwapFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapFacet__factory extends ContractFactory {
  constructor(...args: SwapFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapFacet> {
    return super.deploy(overrides || {}) as Promise<SwapFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapFacet {
    return super.attach(address) as SwapFacet;
  }
  override connect(signer: Signer): SwapFacet__factory {
    return super.connect(signer) as SwapFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapFacetInterface {
    return new utils.Interface(_abi) as SwapFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapFacet {
    return new Contract(address, _abi, signerOrProvider) as SwapFacet;
  }
}
