/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ClipperRouter,
  ClipperRouterInterface,
} from "../../../../contracts/Test/AggregationRouterV5.sol/ClipperRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWETH",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "SafePermitBadLength",
    type: "error",
  },
  {
    inputs: [],
    name: "SafeTransferFromFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IClipperExchangeInterface",
        name: "clipperExchange",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "srcToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "dstToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "inputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "outputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "goodUntil",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "vs",
        type: "bytes32",
      },
    ],
    name: "clipperSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IClipperExchangeInterface",
        name: "clipperExchange",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "srcToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "dstToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "inputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "outputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "goodUntil",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "vs",
        type: "bytes32",
      },
    ],
    name: "clipperSwapTo",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IClipperExchangeInterface",
        name: "clipperExchange",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "srcToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "dstToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "inputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "outputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "goodUntil",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "vs",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "permit",
        type: "bytes",
      },
    ],
    name: "clipperSwapToWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a03461007857601f61070a38819003918201601f19168301916001600160401b0383118484101761007d5780849260209460405283398101031261007857516001600160a01b038116810361007857608052604051610676908161009482396080518181816103ef01528181610510015261054b0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c8063093d4fa5146101f057806384bd6d29146101a35763c805a6661461004e5750610011565b3461019f5761014036600319011261019f57610068610240565b9261007161025b565b610079610271565b91610082610287565b936101243567ffffffffffffffff80821161019b573660238301121561019b578183013590811161019b576024820191602482369201011161019b5783919060e0810361014457602093818a519363d505accf60e01b855282850137019082875af180610125575b1561011a5750916020949161011393610104359360e4359360c4359360a435936084359361029d565b9051908152f35b8451903d90823e3d90fd5b503d1561013b576001815114601f3d11166100ea565b823b15156100ea565b915091610100821460001461018d57918391602093818a51936323f2ebc360e21b855282850137019082875af180156100ea57503d1561013b576001815114601f3d11166100ea565b8751636827585760e01b8152fd5b8380fd5b8280fd5b50506101003660031901126101ec576020906101136101c0610240565b6101c861025b565b906101d1610271565b60e4359260c4359260a435926084359260643592339061029d565b5080fd5b50506101203660031901126101ec5760209061011361020d610240565b61021561025b565b61021d610271565b610225610287565b91610104359360e4359360c4359360a435936084359361029d565b600435906001600160a01b038216820361025657565b600080fd5b602435906001600160a01b038216820361025657565b604435906001600160a01b038216820361025657565b606435906001600160a01b038216820361025657565b9192949790966001600160a01b0393848116801590816000146105495750863403610537575b1561034e57509160009697916101499593889795936040519a8b976309ea6d0960e21b895260048901528660248901528c6044890152606488015260848701528160ff1c601b0160a487015260c486015260018060ff1b031660e485015261012061010485015264a62929c86960d31b610143850152165af115610345575090565b3d6000823e3d90fd5b93949695858116968715801561050c575b1561048857908694939291604051998a9763132da19360e21b8952600489015260248801528b604488015260648701521560011461047d573060848601525b601b60ff83901c0160a486015260c48501526001600160ff1b031660e484015261012061010484015264a62929c86960d31b6101438401526000958692839261014992918491165af11561047557507f00000000000000000000000000000000000000000000000000000000000000001680911461041d575b50505090565b604051630d0e30db60e41b815292828060048688865af11561046b57604484848094819463a9059cbb60e01b845260048401528860248401525af1156104635780610417565b3d90823e3d90fd5b50503d90823e3d90fd5b3d84823e3d90fd5b88608486015261039e565b60009889985099889593916101699895939b6040519c8d99630ad9469b60e21b8b5260048b015260248a015260448901528c6064890152608488015260a48701528160ff1c601b0160c487015260e486015260018060ff1b031661010485015261014061012485015264a62929c86960d31b610163850152165af115610345575090565b50867f000000000000000000000000000000000000000000000000000000000000000016881461035f565b604051631841b4e160e01b8152600490fd5b7f00000000000000000000000000000000000000000000000000000000000000008716919082036105d257506001903461053757604051906323b872dd60e01b82526004820190338252306024840152896044840152600091828060648682865af11561046b576024848480948e8295632e1a7d4d60e01b8552525af1156104635750506102c3565b905034610537576020600060646040516323b872dd60e01b815233600482015289891660248201528a604482015282865af180610620575b6102c35760405163f405907160e01b8152600490fd5b503d1561063757600160005114601f3d111661060a565b813b151561060a56fea26469706673582212207dc9a80cd84739b067a42ca9b0f1079fb177afa99aaaf938e5a8a348a3202f0764736f6c63430008130033";

type ClipperRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClipperRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClipperRouter__factory extends ContractFactory {
  constructor(...args: ClipperRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ClipperRouter> {
    return super.deploy(weth, overrides || {}) as Promise<ClipperRouter>;
  }
  override getDeployTransaction(
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  override attach(address: string): ClipperRouter {
    return super.attach(address) as ClipperRouter;
  }
  override connect(signer: Signer): ClipperRouter__factory {
    return super.connect(signer) as ClipperRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClipperRouterInterface {
    return new utils.Interface(_abi) as ClipperRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClipperRouter {
    return new Contract(address, _abi, signerOrProvider) as ClipperRouter;
  }
}
