/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  NonceManager,
  NonceManagerInterface,
} from "../../../../contracts/Test/AggregationRouterV5.sol/NonceManager";

const _abi = [
  {
    inputs: [],
    name: "AdvanceNonceFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newNonce",
        type: "uint256",
      },
    ],
    name: "NonceIncreased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "advanceNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "increaseNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "makerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "makerNonce",
        type: "uint256",
      },
    ],
    name: "nonceEquals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761020c908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c90816370ae92d2146101885750806372c244a8146100ff578063c53a02921461008a5763cf6fc6e31461004e57600080fd5b346100865780600319360112610086576020916001600160a01b036100716101bb565b16815280835281602435912054149051908152f35b5080fd5b5034610086578160031936011261008657338252816020528082205490600182018092116100eb57338352826020528181842055519081527ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db60203392a280f35b634e487b7160e01b83526011600452602483fd5b5034610086576020366003190112610086576004359060ff82168092036101845781156101745733835282602052808320549182018092116100eb57338352826020528181842055519081527ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db60203392a280f35b5163bd71636d60e01b8152600490fd5b8280fd5b91905034610184576020366003190112610184576020926001600160a01b036101af6101bb565b16815280845220548152f35b600435906001600160a01b03821682036101d157565b600080fdfea264697066735822122053cc587521af89e285fd7acf8f8323bd6c534e2300a5e3fb09648a3e4076f01c64736f6c63430008130033";

type NonceManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NonceManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NonceManager__factory extends ContractFactory {
  constructor(...args: NonceManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NonceManager> {
    return super.deploy(overrides || {}) as Promise<NonceManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NonceManager {
    return super.attach(address) as NonceManager;
  }
  override connect(signer: Signer): NonceManager__factory {
    return super.connect(signer) as NonceManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NonceManagerInterface {
    return new utils.Interface(_abi) as NonceManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NonceManager {
    return new Contract(address, _abi, signerOrProvider) as NonceManager;
  }
}
