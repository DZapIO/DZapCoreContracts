/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  RouterErrors,
  RouterErrorsInterface,
} from "../../../../contracts/Test/AggregationRouterV5.sol/RouterErrors";

const _abi = [
  {
    inputs: [],
    name: "ERC20TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ReturnAmountIsNotEnough",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220dab669fee2d1cdeb3127e7f596db30fabe93fce301796b5c556b8988c66e2cee64736f6c63430008130033";

type RouterErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouterErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RouterErrors__factory extends ContractFactory {
  constructor(...args: RouterErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RouterErrors> {
    return super.deploy(overrides || {}) as Promise<RouterErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RouterErrors {
    return super.attach(address) as RouterErrors;
  }
  override connect(signer: Signer): RouterErrors__factory {
    return super.connect(signer) as RouterErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterErrorsInterface {
    return new utils.Interface(_abi) as RouterErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterErrors {
    return new Contract(address, _abi, signerOrProvider) as RouterErrors;
  }
}
