/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  UnoswapV3Router,
  UnoswapV3RouterInterface,
} from "../../../../contracts/Test/AggregationRouterV5.sol/UnoswapV3Router";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWETH",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BadPool",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyPools",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ReturnAmountIsNotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "SafePermitBadLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minReturn",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "pools",
        type: "uint256[]",
      },
    ],
    name: "uniswapV3Swap",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minReturn",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "pools",
        type: "uint256[]",
      },
    ],
    name: "uniswapV3SwapTo",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "srcToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minReturn",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "pools",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "permit",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapToWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a03461007157601f610cee38819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b038116810361007157608052604051610c61908161008d82396080518181816105d301526106f10152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c9081632521b9301461005e57508063bc80f1a814610059578063e449022e146100545763fa461e330361000e57610200565b6101c2565b61016e565b346100f25760c03660031901126100f25760043561007b816100f9565b60243591610088836100f9565b67ffffffffffffffff906084358281116100f5576100aa90369060040161010f565b92909160a4359182116100f2576100ee6100de878787876100ce3660048a01610140565b94909360643591604435916103a8565b6040519081529081906020820190565b0390f35b80fd5b5080fd5b6001600160a01b0381160361010a57565b600080fd5b9181601f8401121561010a5782359167ffffffffffffffff831161010a576020808501948460051b01011161010a57565b9181601f8401121561010a5782359167ffffffffffffffff831161010a576020838186019501011161010a57565b608036600319011261010a57600435610186816100f9565b60643567ffffffffffffffff811161010a576020916101ac6101ba92369060040161010f565b916044359060243590610531565b604051908152f35b606036600319011261010a5760443567ffffffffffffffff811161010a576101ba6101f3602092369060040161010f565b9060243560043533610531565b3461010a57606036600319011261010a57600480359060443567ffffffffffffffff811161010a576102359036908301610140565b50506040519060158201907f0dfe1681d21220a7ddca3f43a9059cbb23b872dd000000000000000000000000908184526020838286335afa156103a357603584019460208683808801335afa156103a3576020605586018360088801335afa156103a3576000811360011461037757507fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54855195602435945b7fff1f98431c8ad98523631ae4a59f267346ea31f9840000000000000000000000875260608120905252336001600160a01b036055862016186103685750825260843560013082141461034457610019936000601085829560649560146020990152336034830152605482015201915af161089d565b506044610019936000600c6020958295336010830152603082015201915af161089d565b635960139160e11b6000908152fd5b947fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5490845196946102ce565b610893565b9690919293949560009260e083146000146103dd576103c7935061045a565b156103d8576103d594610531565b90565b61044e565b91610100810361043c576040516323f2ebc360e21b8152602092859290819060048401376004019082855af19182610417575b50506103c7565b9091503d1561043357600191505114601f3d11165b3880610410565b503b151561042c565b604051636827585760e01b8152600490fd5b6040513d6000823e3d90fd5b9291602091600091806040519263d505accf60e01b845260048401376004019082865af191826104875750565b9091503d156104a05750600160005114601f3d1116905b565b3b151590565b90156104af5790565b634e487b7160e01b600052603260045260246000fd5b91908110156104af5760051b0190565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116104ff57604052565b6104d5565b90601f8019910116810190811067ffffffffffffffff8211176104ff57604052565b600091031261010a57565b9294939194821561076757341515926000198101908385600160fd1b6105588585886104c5565b35161515966106e0575b60019586841115610698575061058c91901561069257305b61058484876104a6565b3590306109f9565b93805b8382106106715750506105ba9392916105b191866000146106615730936104c5565b359030906109f9565b935b841061064f576105c95750565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690813b1561010a57604051632e1a7d4d60e01b815260048101859052916000908390602490829084905af19081156103d85761049e928592610636575b506107eb565b80610643610649926104eb565b80610526565b38610630565b60405163f32bec2f60e01b8152600490fd5b6001600160a01b038816936104c5565b61068a8296610682839486896104c5565b3530306109f9565b95019061058f565b3361057a565b6106c3965094909350916106bc915086156106d05730935b156106c95730926104a6565b35916109f9565b936105bc565b33926104a6565b6001600160a01b038816936106b0565b853403610755576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803b1561010a5760008791600460405180948193630d0e30db60e41b83525af180156103d857610742575b50610562565b8061064361074f926104eb565b3861073c565b604051631841b4e160e01b8152600490fd5b6040516333f3e07b60e11b8152600490fd5b1561078057565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b81471061084e5760008080936001600160a01b038294165af13d15610845573d9067ffffffffffffffff82116104ff5760405161049e92610836601f8201601f191660200183610504565b8152600060203d92013e610779565b61049e90610779565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b3d6000803e3d6000fd5b1561089357600160005114601f3d11163d1517156108b757565b633c9fd93960e21b60005260046000fd5b919082604091031261010a576020825192015190565b919392906001600160a01b03168252602093600085840152604083015273fffd8963efd1fc6a506488495d951d5263988d25606083015260a060808301528051908160a084015260005b82811061094a57505060c09293506000838284010152601f8019910116010190565b81810186015184820160c001528501610928565b92906001600160a01b03909594929516835260209415158584015260408301526401000276a4606083015260a060808301528051908160a084015260005b8281106109be57505060c09293506000838284010152601f8019910116010190565b81810186015184820160c00152850161099c565b600160ff1b81146109e35760000390565b634e487b7160e01b600052601160045260246000fd5b9092600160ff1b83161591908215610acb579160006001600160a01b0360409593610a55610a2a610a479997610bc4565b88516001600160a01b039098166020890152969889906040820190565b03601f1981018a5289610504565b610a74875198899788968794630251596160e31b86526004860161095e565b0393165af19081156103d8576103d591610a9691600091610a9b575b506109d2565b610b75565b610abc915060403d8111610ac4575b610ab48183610504565b8101906108c8565b905038610a90565b503d610aaa565b610b0b92509360006001600160a01b0360409593610b19610aee610b3599610bc4565b88516001600160a01b039096166020870152949687906040820190565b03601f198101885287610504565b8651630251596160e31b815297889687958693600485016108de565b0393165af19081156103d8576103d591610a9691600091610b5657506109d2565b610b6e915060403d8111610ac457610ab48183610504565b5038610a90565b60008112610b805790565b606460405162461bcd60e51b815260206004820152602060248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152fd5b6001600160ff1b038111610bd55790565b60405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608490fdfea26469706673582212207388c354c34cca36bbf8dff5a6254aefe09089fbdae68a90fdb2e496b26145c164736f6c63430008130033";

type UnoswapV3RouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UnoswapV3RouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UnoswapV3Router__factory extends ContractFactory {
  constructor(...args: UnoswapV3RouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UnoswapV3Router> {
    return super.deploy(weth, overrides || {}) as Promise<UnoswapV3Router>;
  }
  override getDeployTransaction(
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  override attach(address: string): UnoswapV3Router {
    return super.attach(address) as UnoswapV3Router;
  }
  override connect(signer: Signer): UnoswapV3Router__factory {
    return super.connect(signer) as UnoswapV3Router__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UnoswapV3RouterInterface {
    return new utils.Interface(_abi) as UnoswapV3RouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UnoswapV3Router {
    return new Contract(address, _abi, signerOrProvider) as UnoswapV3Router;
  }
}
