/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BridgeMock,
  BridgeMockInterface,
} from "../../../contracts/Test/BridgeMock";

const _abi = [
  {
    inputs: [],
    name: "BridgeCallFailedFromRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidNativeFee",
    type: "error",
  },
  {
    inputs: [],
    name: "NativeTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ReceiverCallFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "BPS_DENOMINATOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BPS_MULTIPLIER",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "testRevert_",
        type: "bool",
      },
    ],
    name: "bridge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callTo_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "callData_",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "testRevert_",
        type: "bool",
      },
    ],
    name: "bridgeAndSwap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "nativeFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callTo_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "callData_",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "testRevert_",
        type: "bool",
      },
    ],
    name: "sendCallToReceiver",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080806040523461003557612710600055620f4240600155670de0b6b3a764000060025561c350600355610853908161003b8239f35b600080fdfe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c91826345599136146103be5750816350a3c9c61461026a5781637b2c371f1461024d5781639b51352f14610223578163a39f3f9d14610204578163d7690f98146100a0575063e1a452181461007f5780610012565b3461009c578160031936011261009c576020906001549051908152f35b5080fd5b83836100ab3661042e565b9490946101f5576100bb836107a0565b9182156101e2576100ce600254826104d1565b34036101d25786979695965b6100fb6100f56100ec600354856104f4565b60015490610507565b83610527565b9487941561012a575050505050928291610127945b602083519301915af1610121610534565b506107d1565b80f35b91868861017b96979361014b6001600160a01b036020971694303387610564565b86519788958694859363095ea7b360e01b85528401602090939291936001600160a01b0360408201951681520152565b03925af19081156101c9575091849391610127969361019b575b50610110565b6101bb9060203d81116101c2575b6101b381836103da565b8101906105bc565b5087610195565b503d6101a9565b513d86823e3d90fd5b815163154b0fd560e11b81528890fd5b60025434036101d25786979695966100da565b51633e16c36f60e11b81528690fd5b50503461009c578160031936011261009c576020906002549051908152f35b838361022e3661042e565b94909461023e576100bb836107a0565b516304c0f1c360e51b81528690fd5b50503461009c578160031936011261009c57602091549051908152f35b91905060803660031901126103ba576001600160a01b03823581811681036103b6576024359182168083036103b2576044359260643580151581036103ae5761039e576102b6906107a0565b92831561038b576102c9600254826104d1565b340361037b5790869392915b6102ed6102e76100ec600354846104f4565b82610527565b931561031c57505082809281925af1610304610534565b501561030f57505080f35b51633d2cec6f60e21b8152fd5b6101279650610368919450946103386103769496303388610564565b5163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201949094529283906064820190565b03601f1981018452836103da565b6105d4565b845163154b0fd560e11b81528690fd5b600254340361037b5790869392916102d5565b84516304c0f1c360e51b81528690fd5b8780fd5b8580fd5b8480fd5b8280fd5b84903461009c578160031936011261009c576020906003548152f35b90601f8019910116810190811067ffffffffffffffff8211176103fc57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116103fc57601f01601f191660200190565b9060a06003198301126104cc576001600160a01b039160043583811681036104cc579260243590811681036104cc57916044359160643567ffffffffffffffff81116104cc57816023820112156104cc5780600401359061048e82610412565b9261049c60405194856103da565b828452602483830101116104cc578160009260246020930183860137830101529060843580151581036104cc5790565b600080fd5b919082018092116104de57565b634e487b7160e01b600052601160045260246000fd5b818102929181159184041417156104de57565b8115610511570490565b634e487b7160e01b600052601260045260246000fd5b919082039182116104de57565b3d1561055f573d9061054582610412565b9161055360405193846103da565b82523d6000602084013e565b606090565b9290604051926323b872dd60e01b60208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff8411176103fc576105ba926040526105d4565b565b908160209103126104cc575180151581036104cc5790565b6001600160a01b0316604051604081019181831067ffffffffffffffff8411176103fc57610644926040526000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161063e610534565b916106cc565b8051908282159283156106b4575b5050501561065d5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6106c493508201810191016105bc565b388281610652565b9192901561072e57508151156106e0575090565b3b156106e95790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156107415750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610787575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610764565b6001600160a01b031680159081156107b6575090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee91501490565b156107d857565b60405162461bcd60e51b815260206004820152601960248201527f6d6f636b2065787465726e616c2063616c6c206661696c6564000000000000006044820152606490fdfea2646970667358221220b7c843e14eb1ae292b80d331d5a282b6fd83cbc34a9839053d62dbc8b4f7637864736f6c63430008130033";

type BridgeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeMock__factory extends ContractFactory {
  constructor(...args: BridgeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeMock> {
    return super.deploy(overrides || {}) as Promise<BridgeMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeMock {
    return super.attach(address) as BridgeMock;
  }
  override connect(signer: Signer): BridgeMock__factory {
    return super.connect(signer) as BridgeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeMockInterface {
    return new utils.Interface(_abi) as BridgeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeMock {
    return new Contract(address, _abi, signerOrProvider) as BridgeMock;
  }
}
