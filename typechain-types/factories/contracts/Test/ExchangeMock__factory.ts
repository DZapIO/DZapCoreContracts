/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ExchangeMock,
  ExchangeMockInterface,
} from "../../../contracts/Test/ExchangeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sent",
        type: "uint256",
      },
    ],
    name: "InvalidNativeSend",
    type: "error",
  },
  {
    inputs: [],
    name: "NativeTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapFailedFromExchange",
    type: "error",
  },
  {
    inputs: [],
    name: "BPS_DENOMINATOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BPS_MULTIPLIER",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate_",
        type: "uint256",
      },
    ],
    name: "changeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "leftOverPercent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "srcToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "dstToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "testLeftOver_",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "testRevert_",
        type: "bool",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "leftOverTokens",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080806040523461002e5761271080600055620f4240600155600255620186a06003556107a690816100348239f35b600080fdfe608060409080825260049081361015610023575b505050361561002157600080fd5b005b600090813560e01c9081632c4e722e1461040a5750806362291636146103eb57806374e7493b146103d15780637b2c371f146103b4578063e1a45218146103915763e5ee6a56036100135760c036600319011261038e578135906001600160a01b03928383169182840361038e5760243585811680820361038a57604435968716870361038a57606435906084359081151582036103865760a435978815158903610382578598610372576100d79061073f565b93841561030c578334036102ef5790899392915b851561028f576100fc60129161073f565b90811561020b5761013e6101356101469261012f60ff6101286101228260125b1661047c565b8b6104a0565b921661047c565b906104b3565b600254906104a0565b8854906104b3565b9a8b91156101fd5787809350809281925af16101606104d3565b50156101ed575b61017b575b88888882519182526020820152f35b61019b9192939495965061019290600354906104a0565b600154906104b3565b948592831561016c57156101da575082809281925af16101b96104d3565b50156101cc57505b38808281808061016c565b8351633d2cec6f60e21b8152fd5b909192506101e89350610513565b6101c1565b8951633d2cec6f60e21b81528690fd5b61020692610513565b610167565b9091929394508b5163313ce56760e01b81526020818a81875afa908115610285576101358d979695949361012f60ff610128610122828f9861013e986101469a91610257575b5061011c565b610278915060203d811161027e575b6102708183610426565b81019061045e565b38610251565b503d610266565b8d513d8a823e3d90fd5b90919293508a5163313ce56760e01b815260208189818c5afa9081156102e5578b95949392916100fc9189916102c7575b509161073f565b6102df915060203d811161027e576102708183610426565b386102c0565b8c513d89823e3d90fd5b8a516352a17f1160e11b8152808801859052346024820152604490fd5b8a516323b872dd60e01b60208201523360248201523060448201526064808201869052815260a0810167ffffffffffffffff81118282101761035f578b959493929161035a918e528a610562565b6100eb565b634e487b7160e01b885260418952602488fd5b8a51631fc509db60e01b81528790fd5b8580fd5b8480fd5b8280fd5b80fd5b5082346103b057816003193601126103b0576020906001549051908152f35b5080fd5b5082346103b057816003193601126103b057602091549051908152f35b5090346103b05760203660031901126103b0573560025580f35b5082346103b057816003193601126103b0576020906003549051908152f35b9050346103b057816003193601126103b0576020906002548152f35b90601f8019910116810190811067ffffffffffffffff82111761044857604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610477575160ff811681036104775790565b600080fd5b604d811161048a57600a0a90565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561048a57565b81156104bd570490565b634e487b7160e01b600052601260045260246000fd5b3d1561050e573d9067ffffffffffffffff82116104485760405191610502601f8201601f191660200184610426565b82523d6000602084013e565b606090565b916001600160a01b036040519263a9059cbb60e01b6020850152166024830152604482015260448152608081019181831067ffffffffffffffff8411176104485761056092604052610562565b565b6001600160a01b031690604051604081019080821067ffffffffffffffff831117610448576105d5916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16105cf6104d3565b9161066b565b805191821591848315610647575b5050509050156105f05750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126103b05782015190811515820361038e5750803880846105e3565b919290156106cd575081511561067f575090565b3b156106885790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156106e05750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610726575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610703565b6001600160a01b03168015908115610755575090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee9150149056fea26469706673582212205e6c06dd24af5b4bc790dd5edf4eb12377d0393f03668343b026476951faaa4064736f6c63430008130033";

type ExchangeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeMock__factory extends ContractFactory {
  constructor(...args: ExchangeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExchangeMock> {
    return super.deploy(overrides || {}) as Promise<ExchangeMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ExchangeMock {
    return super.attach(address) as ExchangeMock;
  }
  override connect(signer: Signer): ExchangeMock__factory {
    return super.connect(signer) as ExchangeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeMockInterface {
    return new utils.Interface(_abi) as ExchangeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangeMock {
    return new Contract(address, _abi, signerOrProvider) as ExchangeMock;
  }
}
