/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  PermitHash,
  PermitHashInterface,
} from "../../../../contracts/Test/Permit2Mock.sol/PermitHash";

const _abi = [
  {
    inputs: [],
    name: "_PERMIT_BATCH_TRANSFER_FROM_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_PERMIT_BATCH_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_PERMIT_DETAILS_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_PERMIT_SINGLE_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_PERMIT_TRANSFER_FROM_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_TOKEN_PERMISSIONS_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_TOKEN_PERMISSIONS_TYPESTRING",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a5761044d9081610020823930815050f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081633eb8b8fd1461039957508063415e982d146103645780636302c3cf1461032f5780636e4f2775146102fa57806378f16830146102c557806384b8efbb1461020c57806390bbf2f31461014c578063c0c7fa7e146100bd5763c5df4f031461008557600080fd5b816003193601126100b957602090517ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d08152f35b5080fd5b50816003193601126100b9578051906060820182811067ffffffffffffffff8211176101385761013493508152602e82527f546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c7560208301526d696e7432353620616d6f756e742960901b8183015251918291826103ce565b0390f35b634e487b7160e01b84526041600452602484fd5b50816003193601126100b95780519060a0820182811067ffffffffffffffff8211176101385761013493508152606b82527f5065726d697442617463685769746e6573735472616e7366657246726f6d285460208301527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472818301527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608301526a0d88191958591b1a5b994b60aa1b608083015251918291826103ce565b50816003193601126100b95780519060a0820182811067ffffffffffffffff8211176101385761013493508152606482527f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5060208301527f65726d697373696f6e73207065726d69747465642c6164647265737320737065818301527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c6060830152631a5b994b60e21b608083015251918291826103ce565b50816003193601126100b957602090517f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068152f35b50816003193601126100b957602090517f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b36788152f35b50816003193601126100b957602090517faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638152f35b50816003193601126100b957602090517f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a18152f35b8390816003193601126100b957807ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b76660209252f35b6020808252825181830181905290939260005b82811061040357505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016103e156fea2646970667358221220d5fb4ebff7930bcb8c006451915313ceb3802a63f25aa0bd7c630e6d106c33b164736f6c63430008130033";

type PermitHashConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermitHashConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermitHash__factory extends ContractFactory {
  constructor(...args: PermitHashConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PermitHash> {
    return super.deploy(overrides || {}) as Promise<PermitHash>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PermitHash {
    return super.attach(address) as PermitHash;
  }
  override connect(signer: Signer): PermitHash__factory {
    return super.connect(signer) as PermitHash__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermitHashInterface {
    return new utils.Interface(_abi) as PermitHashInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PermitHash {
    return new Contract(address, _abi, signerOrProvider) as PermitHash;
  }
}
