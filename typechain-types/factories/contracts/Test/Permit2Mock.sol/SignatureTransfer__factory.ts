/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SignatureTransfer,
  SignatureTransferInterface,
} from "../../../../contracts/Test/Permit2Mock.sol/SignatureTransfer";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxAmount",
        type: "uint256",
      },
    ],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidContractSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidNonce",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "LengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "signatureDeadline",
        type: "uint256",
      },
    ],
    name: "SignatureExpired",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "word",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "mask",
        type: "uint256",
      },
    ],
    name: "UnorderedNonceInvalidation",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wordPos",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mask",
        type: "uint256",
      },
    ],
    name: "invalidateUnorderedNonces",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "nonceBitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
        name: "transferDetails",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions[]",
            name: "permitted",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
        name: "transferDetails",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
        name: "transferDetails",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "witness",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "witnessTypeString",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitWitnessTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions[]",
            name: "permitted",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
        name: "transferDetails",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "witness",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "witnessTypeString",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitWitnessTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0346100bb574660a052602081017f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a60408301524660608301523060808301526080825260a082019180831060018060401b038411176100a5578260405251902060805261105b90816100c18239608051816109bb015260a051816109950152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c8063137c29fe1461054f57806330f28b7a1461048b5780633644e515146104685780633ff9dcb1146104065780634fe02b44146103c1578063edd9444b146102945763fe8ec1a71461006e57600080fd5b346102905760c03660031901126102905767ffffffffffffffff833581811161028c5761009e903690860161085e565b602435828111610288576100b59036908701610961565b6100bd610796565b91608435858111610284576100d59036908a01610818565b98909560a435908111610280576100ee91369101610818565b9690958151906100fd82610705565b606b82527f5065726d697442617463685769746e6573735472616e7366657246726f6d285460208301527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472838301527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608301526a0d88191958591b1a5b994b60aa1b608083015282519a8b918161019a602085018096610a9d565b918237018a815203996101b5601f199b8c8101835282610759565b519020908551516101c581610e2f565b908a5b818110610253575050610250999a6102479183516101fa816101ee602082018095610e84565b03848101835282610759565b519020602089810151858b015195519182019687526040820192909252336060820152608081019190915260a081019390935260643560c08401528260e081015b03908101835282610759565b51902093610ec1565b80f35b8061026b61026561027b938c51610e70565b51610a4d565b6102758286610e70565b52610e61565b6101c8565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b5091346102905760803660031901126102905767ffffffffffffffff90803582811161028c576102c7903690830161085e565b602435838111610288576102de9036908401610961565b9390926102e9610796565b916064359081116103bd5761030091369101610818565b9490938351519761031089610e2f565b98885b81811061039b5750506102509798815161034381610335602082018095610e84565b03601f198101835282610759565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102478161073d565b808b610275826103b26102656103b8968d51610e70565b92610e70565b610313565b8680fd5b508234610402578160031936011261040257356001600160a01b03811680910361040257828291602094528084528181206024358252845220549051908152f35b8280fd5b5082346104025781600319360112610402577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b5034610290578160031936011261029057602090610484610992565b9051908152f35b5082903461040257610100366003190112610402576104a9366107ac565b908060831936011261028c576104bd61077b565b9160e43567ffffffffffffffff811161054b57610250946104e091369101610818565b9390926104ed8351610a4d565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a081526105428161073d565b51902091610ac8565b8580fd5b508234610402576101403660031901126104025761056c366107ac565b918060831936011261028c5761058061077b565b67ffffffffffffffff9390610104358581116103bd576105a39036908601610818565b909361012435968711610284576105c36105429661025098369101610818565b9690958251906105d282610705565b606482527f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5060208301527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848301527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c6060830152631a5b994b60e21b6080830152835194859181610668602085018096610a9d565b918237018b81520393610683601f1995868101835282610759565b519020926106918651610a4d565b6020878101518589015195519182019687526040820192909252336060820152608081019190915260a081019390935260e43560c08401528260e0810161023b565b6060810190811067ffffffffffffffff8211176106ef57604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176106ef57604052565b6080810190811067ffffffffffffffff8211176106ef57604052565b60c0810190811067ffffffffffffffff8211176106ef57604052565b90601f8019910116810190811067ffffffffffffffff8211176106ef57604052565b60c435906001600160a01b038216820361079157565b600080fd5b604435906001600160a01b038216820361079157565b6003190190608082126107915760408051906107c7826106d3565b8082941261079157805181810181811067ffffffffffffffff8211176106ef5782526004356001600160a01b0381168103610791578152602435602082015282526044356020830152606435910152565b9181601f840112156107915782359167ffffffffffffffff8311610791576020838186019501011161079157565b67ffffffffffffffff81116106ef5760051b60200190565b919091606081840312610791576040805191610879836106d3565b8294813567ffffffffffffffff9081811161079157830182601f820112156107915780356108a681610846565b926108b387519485610759565b818452602094858086019360061b85010193818511610791579086899897969594939201925b8484106108f6575050505050855280820135908501520135910152565b909192939495969784830312610791578851908982018281108582111761094c578a528435906001600160a01b0382168203610791578289928c94528287013583820152815201930191908897969594936108d9565b60246000634e487b7160e01b81526041600452fd5b9181601f840112156107915782359167ffffffffffffffff8311610791576020808501948460061b01011161079157565b467f0000000000000000000000000000000000000000000000000000000000000000036109dd577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a604082015246606082015230608082015260808152610a4781610705565b51902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a184526001600160a01b0381511660408401520151606082015260608152610a4781610721565b9081519160005b838110610ab5575050016000815290565b8060208092840101518185015201610aa4565b9192909360a435936040840151804211610b4b5750602084510151808611610b335750918591610b08610b0e94610b03602088015186610fd6565b610dfe565b91610b79565b6001600160a01b03809151511692608435918216820361079157610b3193610d79565b565b60249060405190633728b83d60e01b82526004820152fd5b6024906040519063cd21db4f60e01b82526004820152fd5b9190826040910312610791576020823592013590565b6000843b610c9d575060418203610c3757610b9682820182610b63565b93909260401015610c215760209360009360ff6040608095013560f81c5b60405194855216868401526040830152606082015282805260015afa15610c15576001600160a01b038060005116918215610c03571603610bf157565b604051632057875960e21b8152600490fd5b604051638baa579f60e01b8152600490fd5b6040513d6000823e3d90fd5b634e487b7160e01b600052603260045260246000fd5b60408203610c8b57610c4b91810190610b63565b6001600160ff1b0381169260ff91821c601b01918211610c755760209360009360ff608094610bb4565b634e487b7160e01b600052601160045260246000fd5b604051634be6321b60e01b8152600490fd5b918093946020926001600160a01b036064604051809881968295630b135d3f60e11b9c8d8552600485015260406024850152816044850152848401378181018301899052601f01601f19168101030192165afa918215610d6c578192610d23575b50506001600160e01b03191603610d1157565b604051632c19a72f60e21b8152600490fd5b9091506020813d8211610d64575b81610d3e60209383610759565b810103126102905751906001600160e01b031982168203610d6157503880610cfe565b80fd5b3d9150610d31565b50604051903d90823e3d90fd5b9060006064926020958295604051946323b872dd60e01b86526004860152602485015260448401525af13d15601f3d1160016000511416171615610db957565b60405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606490fd5b610e06610992565b9060405190602082019261190160f01b84526022830152604282015260428152610a4781610721565b90610e3982610846565b610e466040519182610759565b8281528092610e57601f1991610846565b0190602036910137565b6000198114610c755760010190565b8051821015610c215760209160051b010190565b805160208092019160005b828110610e9d575050505090565b835185529381019392810192600101610e8f565b9190811015610c215760061b0190565b90919593958151519560409586840151804211610fbf5750828803610f9557610ef9918691610b0860209b610b038d89015186610fd6565b600091825b878110610f1057505050505050505050565b610f1b818351610e70565b5189610f28838689610eb1565b0135908a810151808311610f7e575081610f47575b5050600101610efe565b6001600160a01b0380915116610f5e84878a610eb1565b3591821682036103bd5791610f77918960019594610d79565b9038610f3d565b6024908a5190633728b83d60e01b82526004820152fd5b86517fff633a38000000000000000000000000000000000000000000000000000000008152600490fd5b60249088519063cd21db4f60e01b82526004820152fd5b906001600160a01b03600160ff83161b9216600052600060205260406000209060081c600052602052604060002081815418809155161561101357565b604051633ab3447f60e11b8152600490fdfea264697066735822122070a97ab5f2763067086042346d58c479ead8c4190b81661badb38d16c1f833db64736f6c63430008130033";

type SignatureTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignatureTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignatureTransfer__factory extends ContractFactory {
  constructor(...args: SignatureTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SignatureTransfer> {
    return super.deploy(overrides || {}) as Promise<SignatureTransfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SignatureTransfer {
    return super.attach(address) as SignatureTransfer;
  }
  override connect(signer: Signer): SignatureTransfer__factory {
    return super.connect(signer) as SignatureTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignatureTransferInterface {
    return new utils.Interface(_abi) as SignatureTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignatureTransfer {
    return new Contract(address, _abi, signerOrProvider) as SignatureTransfer;
  }
}
